"use strict";(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[894],{6042:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"why-you-should-kick-idle-users-out-of-your-website","metadata":{"permalink":"/blog/why-you-should-kick-idle-users-out-of-your-website","source":"@site/blog/2023-12-25-kicking-idle-users/index.md","title":"Why you should kick idle users out of your website","description":"Few tips on how to avoid some of NestJS performance bottlenecks","date":"2023-12-25T00:00:00.000Z","formattedDate":"December 25, 2023","tags":[{"label":"backend","permalink":"/blog/tags/backend"},{"label":"frontend","permalink":"/blog/tags/frontend"},{"label":"security","permalink":"/blog/tags/security"},{"label":"privacy","permalink":"/blog/tags/privacy"},{"label":"development","permalink":"/blog/tags/development"}],"readingTime":5.33,"hasTruncateMarker":true,"authors":[{"name":"Abdeldjalil Fortas","title":"A part-time Karantika lover","url":"https://github.com/fcmam5","imageURL":"https://github.com/fcmam5.png","key":"fcmam5"}],"frontMatter":{"description":"Few tips on how to avoid some of NestJS performance bottlenecks","slug":"why-you-should-kick-idle-users-out-of-your-website","authors":["fcmam5"],"tags":["backend","frontend","security","privacy","development"]},"unlisted":false,"nextItem":{"title":"Avoiding NestJS performance bottlenecks","permalink":"/blog/avoiding-nestjs-performance-bottlenecks"}},"content":"If you use any applications that handle sensitive information, you might already have a situation where you get a countdown before you get logged off, this happens if you don\u2019t interact with the website after a certain (short) period.\\n\\nStreaming platforms also ask you if you are still watching before they stop the video or navigate to the next episode.\\n\\n\x3c!-- truncate --\x3e\\n\\nDoes this feature harm the user experience? Or does it improve it?\\nIs it really necessary? This will bring more complexity to implement, test, and maintain.\\n\\nOr seriously, when this feature is a must-have and how to present it in the least frustrating format to the users.\\n\\nWhat if the user wants to disable this feature?\\n\\n<br/>\\n\\nOf course, the answer to all those questions is: It depends.\\n\\nLet me enumerate some arguments and situations where force-logging off the users would be needed.\\n\\n> TLDR; Regulations, to protect user privacy, for security reasons, possibly for your resource management and for keeping meaningful analytics.\\n\\n\\n:::note\\nI published this article previously on Medium: [Why you should kick idle users out of your website](https://medium.com/@Fcmam5/why-you-should-kick-idle-users-out-of-your-website)\\n:::\\n\\n## The \u201cWHY\u201d?\\n\\nIf we understand the arguments to do this, we may decide if we should care to implement this or not.\\n\\n> **Spoiler alert:** No you don\u2019t have to do it always, just use short-lived authentication sessions/tokens.\\n\\n### 0. Privacy\\n\\nUsers might not follow basic cyber hygiene principles, leaving their devices unlocked and unattended. They may keep their browser tab open to your super-sensitive website. Any unauthorized access to their devices means definite access to their open accounts and active sessions.\\n\\nIf your super-sensitive website implements a feature that checks if the user is idle and logs them out, you might reduce the risk of having unauthorized access or leaking sensitive information from your user\u2019s account.\\n\\n### 1. Security\\n\\nUnauthorized access to one of the users\u2019 accounts may not only cause harm to their data, but it would also be a risk to other users as threat actors will use their victim\u2019s persona/account in their actions.\\n\\nThat also may put your application at a higher risk as you\u2019ll have to deal with users who already are one step further in your system, and who already have valid authentication tokens and valid external-facing API keys. That would expose them to more features of your application and possibly a larger attack surface.\\n\\n### 2. Resource management\\n\\nYou probably saw a prompt on [Netflix](https://help.netflix.com/en/node/114059) or [YouTube](https://support.google.com/youtube/answer/12819304?hl=en) asking you if you are still watching a video. Or you get a refresh button in your favorite social media platform to refresh content (or login again) after being AFK for a while.\\n\\nStreaming content is expensive, and it puts a load on both the backend and heavy clients.\\n\\nNo one wants to maintain multiple open connections from their load balancers to users who are not consuming content.\\n\\n### 3. Compliance and regulations\\n\\nIt is no surprise, that regulators require logging off inactive users after a moment of inactivity. For example, PSD 2 regulation for example requires logging out the user if they\u2019re inactive for 5 minutes:\\n\\n> *The automatic logout after five minutes of inactivity is a regulatory requirement for banks and payment service providers under the PSD 2 regulation to increase security in online banking. See article 4(3)(d) of the DELEGATED REGULATION (EU) 2018/389 (RTS), https://eur-lex.europa.eu/legal-content/EN/TXT/PDF/?uri=CELEX:32018R0389&from=EN (\u201cthe maximum time without activity by the payer after being authenticated for accessing its payment account online shall not exceed 5 minutes.\u201d). [[commerzbank](https://cbportal.commerzbank.com/portal/en/fi/de/system-1/zahlungsdiensterichtlinie_2.html)]*\\n\\n\\nThis imposes on payment services to implement this feature to be compliant, which is a non-negotiable argument.\\n\\n### 4. Getting \\"better\\" analytics\\n\\nUser session times, length of videos watched, number of active users, and similar metrics might give valuable information on how clients are consuming your products and/or using your platform.\\n\\n## The \u201cHow\u201d?\\n\\nThroughout the article I used \u201cthe feature\u201d or \u201ckick the user if they\u2019re idle\u201d or similar expressions.\\n\\nThis feature can be implemented on both the backend and/or front-end. On the backend, you would invalidate idle user sessions (see [OWASP recommendation](https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#idle-timeout)).\\n\\nThe front-end solution would be done by capturing each user\u2019s activity through events like:\\n\\n- Key presses\\n- Mouse move\\n- Clicking\\n- Scrolling\\n- Window resize\\n\\nThen have a timer that we actively reset when the user is active (reset the timer if a new event is triggered).\\n\\nThis part can be easily implemented from scratch (as you already know), or by using the [new **experimental** browser idle APIs](https://developer.mozilla.org/en-US/docs/Web/API/Idle_Detection_API), or [hamid.js](https://www.npmjs.com/package/hamid.js) library (more on this later).\\n\\nIf a user is idle, there should be presented a prompt component with a timer to remind them to react in case they want to keep their session open.\\n\\n[![Idle prompt from Microsoft Dynamics 365](ms-idle-prompt.png)](https://learn.microsoft.com/en-us/business-applications-release-notes/april19/dynamics365-finance-operations/alert-user-before-session-ends)\\n\\nIf they are logged off, it would be beneficial to present them with a flash message to inform them that they were logged off.\\n\\n![ELSTER (online German tax office) example](elster.png)\\n\\nA similar alert would train the users on the \u201cbest practices\u201d.\\n\\n### A word on Hamid.js\\n\\nA couple of months ago I wrote [Hamid.js](https://github.com/Fcmam5/hamid.js), a lightweight open-source library to trigger actions if a user is inactive.\\n\\nFor example, if you want to logout a user after 5 minutes of being inactive:\\n\\n<iframe height=\\"300\\" width=\\"100%\\" scrolling=\\"no\\" title=\\"Hamid.js\\" src=\\"https://codepen.io/Fcmam5/embed/mdodKVN?default-tab=js\\" frameborder=\\"no\\" loading=\\"lazy\\" allowtransparency=\\"true\\" allowfullscreen=\\"true\\">\\n  See the Pen <a href=\\"https://codepen.io/Fcmam5/pen/mdodKVN\\">\\n  Hamid.js</a> by Fortas Abdeldjalil (<a href=\\"https://codepen.io/Fcmam5\\">@Fcmam5</a>)\\n  on <a href=\\"https://codepen.io\\">CodePen</a>.\\n</iframe>\\n\\nThe library listens by default to a [set of events](https://github.com/Fcmam5/hamid.js/blob/127b7b5d7f66aa2ffa922695589737ff8b7b0904/src/lib.ts#L35) to determine if the user is active, if none of these events is triggered within the configured time interval (second `Hamid` constructor parameter, or 5mins by default), the callback we provide as a first parameter will be triggered.\\n\\nThe library will be improved and possibly rewritten to be extensible to support more than web browsers\u2019 events. Of course, all PRs and contributions are welcome!\\n\\n> The name is inspired from an Algerian meme originated from a comedy show where a bus driver asked his ticketsman to kick someone else from the bus by saying: Hamid, Serhah (release him).\\n>\\n> ![Bila Houdoud: Hamid Serhah](hamid-ser7ah.gif)\\n\\n## Final thoughts\\n\\nIn some cases, we would sacrifice having a \u201cseamless\u201d user-experience and easier implementations to provide the users something that we consider better, or at least, more secure.\\n\\nThis article is based on my experience as a developer, and as a lazy user, I hope it receives feedback from smarter people and hopefully, we enrich it together."},{"id":"avoiding-nestjs-performance-bottlenecks","metadata":{"permalink":"/blog/avoiding-nestjs-performance-bottlenecks","source":"@site/blog/2023-09-23-avoiding-nestjs-perf-bottlenecks/index.md","title":"Avoiding NestJS performance bottlenecks","description":"Few tips on how to avoid some of NestJS performance bottlenecks","date":"2023-09-23T00:00:00.000Z","formattedDate":"September 23, 2023","tags":[{"label":"backend","permalink":"/blog/tags/backend"},{"label":"nestjs","permalink":"/blog/tags/nestjs"},{"label":"development","permalink":"/blog/tags/development"}],"readingTime":6.7,"hasTruncateMarker":true,"authors":[{"name":"Abdeldjalil Fortas","title":"A part-time Karantika lover","url":"https://github.com/fcmam5","imageURL":"https://github.com/fcmam5.png","key":"fcmam5"}],"frontMatter":{"description":"Few tips on how to avoid some of NestJS performance bottlenecks","slug":"avoiding-nestjs-performance-bottlenecks","authors":["fcmam5"],"tags":["backend","nestjs","development"]},"unlisted":false,"prevItem":{"title":"Why you should kick idle users out of your website","permalink":"/blog/why-you-should-kick-idle-users-out-of-your-website"},"nextItem":{"title":"CTF as a developer (Pt. 1): Template engines & SSTI","permalink":"/blog/ctf-as-a-developer-pt-1-template-engines-ssti"}},"content":"I have been using [NestJS](https://nestjs.com/) for quite some time now. And as every JavaScript developer, I like to complain about it but I still love it, and I still have it as one of my go-to whenever I want to create any Node application.\\n\\n\x3c!-- truncate --\x3e\\n\\nNestJS helps you enjoy a good developer experience, especially if you are a proponent of OOP, and/or you are working with people who are used to other frameworks like Angular, or coming from a Java/Spring background.\\n\\nNestJS implements [its dependency injection framework](https://github.com/nestjs/nest/blob/master/packages/common/decorators/core/injectable.decorator.ts), which allows an easy abstraction of dependencies making code easier to maintain, test, and swap third-party libraries.\\n\\nWith its powerful [CLI](https://docs.nestjs.com/cli/overview), NestJS bootstraps applications in record time, it also comes with pre-configured modules, or installable plugins making it pleasant to work with and a powerful beginners-friendly tool.\\n\\n:::note\\nI published this article previously on Medium: [Avoiding NestJS performance bottlenecks](https://medium.com/@Fcmam5/avoiding-nestjs-performance-bottlenecks-78fa2bc66372)\\n:::\\n\\nHowever, \u201c[With great power comes great responsibility](https://youtu.be/377VhCOtoDA)\u201d and NestJS is not an exception to Uncle Ben\u2019s quote.\\n\\nNest\u2019s \u201cfancy\u201d configuration is sometimes more fun to develop, but it sometimes causes performance bottlenecks. Especially when we start customizing things out of the framework\u2019s way of doing them, then things can get ugly easily.\\n\\nHere are some of the things I learned over the last few years:\\n\\n## Carefully upgrade to newer NestJS and Node.js versions\\n\\nThe Node.js community is active and continuously working on improving the ecosystem, and now thanks to [a performance-focused team](https://github.com/nodejs/performance) our beloved JavaScript runtime is getting faster and more performant.\\n\\nOne of the performance wins I could achieve was by simply bumping my runtime version from 14 to 16 and then to 18 while making little to no changes to my NestJS microservices code.\\n\\nSimilarly, the NestJS became more stable. With [few](https://github.com/nestjs/docs.nestjs.com/blob/00a3eaa6ee48d072427805efba7b3d7c19cc74fd/content/migration.md) breaking changes from v8.x to 10.x, I feel more comfortable keeping up with new major releases to benefit from the new performance improvements, CVE patches, and bug fixes.\\n\\n## The logger\\n\\nNestJS comes with a default [logger which is used by default `process.stdout.write`](https://github.com/nestjs/nest/blob/67951ff2e9b7f4803856ab8169e23350e49d7dfc/packages/common/services/console-logger.service.ts#L221).\\n\\n\\n`process.stdout` and `process.stderr` is not advised to be used in logging as it may behave synchronously and block the event loop, as the [Node.js documentation states](https://nodejs.org/api/process.html#a-note-on-process-io):\\n\\n\\n> **Warning:** *Synchronous writes block the event loop until the write has completed. This can be near instantaneous in the case of output to a file, but under high system load, pipes that are not being read at the receiving end, or with slow terminals or file systems, it\u2019s possible for the event loop to be blocked often enough and long enough to have severe negative performance impacts. This may not be a problem when writing to an interactive terminal session, **but consider this particularly careful when doing production logging to the process output streams**.*\\n\\nGladly, the logger [can be easily customized](https://docs.nestjs.com/techniques/logger#use-external-logger) and replaced by dedicated logging libraries such as [nestjs-pino](https://github.com/iamolegga/nestjs-pino) and [nest-winston](https://github.com/gremo/nest-winston) which also offer more flexibility and better performance. NestJS documentation covers that well.\\n\\nHowever, even when using custom loggers there are some things to consider.\\n\\n### Startup logger\\n\\nEven if you use a custom logging library, you\u2019d still have the first few logs printed in Nest\u2019s standard standard form. As NestJS will start streaming application start logs before the logger is attached, that not only may lose crucial framework setup logs from being hidden from logging dashboards but also impact the startup time with few MS.\\n\\nFor example, I usually go for [Pino](https://github.com/pinojs/pino) (with [nestjs-pino](https://github.com/iamolegga/nestjs-pino)) as my logging library, my `main.ts` have:\\n\\n\\n```typescript\\nimport { NestFactory } from \'@nestjs/core\';\\nimport { AppModule } from \'./app.module\';\\nimport { Logger } from \'nestjs-pino\';\\n\\nasync function bootstrap() {\\n  const app = await NestFactory.create(AppModule);\\n  app.useLogger(app.get(Logger));\\n\\n  await app.listen(3000);\\n}\\nbootstrap();\\n```\\n\\nThis produces a mixed log format as the following:\\n\\n```json\\n[Nest] 89914  - 09/16/2023, 2:25:41 AM     LOG [NestFactory] Starting Nest application...\\n[Nest] 89914  - 09/16/2023, 2:25:41 AM     LOG [InstanceLoader] AppModule dependencies initialized +16ms\\n[Nest] 89914  - 09/16/2023, 2:25:41 AM     LOG [InstanceLoader] LoggerModule dependencies initialized +0ms\\n{\\"level\\":30,\\"time\\":1694823941975,\\"pid\\":89914,\\"hostname\\":\\"Fcmam5\\",\\"context\\":\\"RoutesResolver\\",\\"msg\\":\\"AppController {/}:\\"}\\n{\\"level\\":30,\\"time\\":1694823941978,\\"pid\\":89914,\\"hostname\\":\\"Fcmam5\\",\\"context\\":\\"RouterExplorer\\",\\"msg\\":\\"Mapped {/, GET} route\\"}\\n{\\"level\\":30,\\"time\\":1694823941980,\\"pid\\":89914,\\"hostname\\":\\"Fcmam5\\",\\"context\\":\\"NestApplication\\",\\"msg\\":\\"Nest application successfully started\\"}\\n```\\n\\nThe fix would be just buffering logs by setting `bufferLogs` to `true`:\\n\\n```typescript\\nimport { NestFactory } from \'@nestjs/core\';\\nimport { AppModule } from \'./app.module\';\\nimport { Logger } from \'nestjs-pino\';\\n\\nasync function bootstrap() {\\n  const app = await NestFactory.create(AppModule, { bufferLogs: true });\\n  app.useLogger(app.get(Logger));\\n\\n  await app.listen(3000);\\n}\\n\\nbootstrap();\\n```\\n\\nThis makes sure all logs will be buffered until the custom logger is attached and then logged in its format (`nestjs-pino` in this case), so I would have something like:\\n\\n```json\\n{\\"level\\":30,\\"time\\":1694858121769,\\"pid\\":97585,\\"hostname\\":\\"Fcmam5\\",\\"context\\":\\"NestFactory\\",\\"msg\\":\\"Starting Nest application...\\"}\\n{\\"level\\":30,\\"time\\":1694858121770,\\"pid\\":97585,\\"hostname\\":\\"Fcmam5\\",\\"context\\":\\"InstanceLoader\\",\\"msg\\":\\"AppModule dependencies initialized\\"}\\n{\\"level\\":30,\\"time\\":1694858121770,\\"pid\\":97585,\\"hostname\\":\\"Fcmam5\\",\\"context\\":\\"InstanceLoader\\",\\"msg\\":\\"LoggerModule dependencies initialized\\"}\\n{\\"level\\":30,\\"time\\":1694858121770,\\"pid\\":97585,\\"hostname\\":\\"Fcmam5\\",\\"context\\":\\"RoutesResolver\\",\\"msg\\":\\"AppController {/}:\\"}\\n{\\"level\\":30,\\"time\\":1694858121770,\\"pid\\":97585,\\"hostname\\":\\"Fcmam5\\",\\"context\\":\\"RouterExplorer\\",\\"msg\\":\\"Mapped {/, GET} route\\"}\\n{\\"level\\":30,\\"time\\":1694858121770,\\"pid\\":97585,\\"hostname\\":\\"Fcmam5\\",\\"context\\":\\"NestApplication\\",\\"msg\\":\\"Nest application successfully started\\"}\\n```\\n\\nNote that for standalone applications [you may need to flush log buffers manually](https://github.com/iamolegga/nestjs-pino#logger-substitution).\\n\\n## Injection scopes\\n\\nWe had a use case where we wanted to inject a [correlation ID](https://microsoft.github.io/code-with-engineering-playbook/observability/correlation-id/) into our logs to keep track of what was happening in our application for a particular request.\\n\\nThe na\xefve approach I was about to use, was to implement a [request-scoped](https://docs.nestjs.com/fundamentals/injection-scopes#request-provider) instance of the logger, something like:\\n\\n```typescript\\nimport { Injectable, Scope, Inject} from \'@nestjs/common\';\\n\\n@Injectable({ scope: Scope.REQUEST })\\nexport class SomeBrokenLoggingService {\\n  ...\\n\\n  log(message) {\\n    callCustomLoggingLib({reqId: this.getCorrelationID(), message })\\n  }\\n}\\n```\\n\\nThen I learned how bad that call was, I overlooked the fact that this approach means that I will be instantiating a new instance `SomeBrokenLoggingService` for each request, that would impact my application performance (see: [injection-scopes#performance](https://docs.nestjs.com/fundamentals/injection-scopes#performance)).\\n\\nThe learnings I got from that were:\\n\\n1. To use a well-maintained library to do that for me.\\n2. To be more careful with Injection scopes.\\n3. Consider using [async local storage](https://docs.nestjs.com/recipes/async-local-storage) for some use cases (recently added, thanks NestJS community!).\\n\\nFor example, [nestjs-pino](https://github.com/iamolegga/nestjs-pino#faq) uses [AsyncLocalStorage](https://nodejs.org/api/async_context.html#async_context_class_asynclocalstorage) (previously relied on [cls-hooked](https://www.npmjs.com/package/cls-hooked) package).\\n\\n## Use Fastify\\n\\nMade by Node.js maintainers who worked on performance, Fastify [has proven its performance](https://fastify.dev/benchmarks) and it\u2019s making its way to compete with Express to be the most popular Node.js framework.\\n\\nNestJS comes by default with [Express platform](https://www.npmjs.com/package/@nestjs/platform-express), but it can be easily switched to Fastify, and the documentation did a great job explaining it on the [\u201cPerformance (Fastify)\u201d page](https://docs.nestjs.com/techniques/performance#performance-fastify).\\n\\n\\nThe switch from Express to Fastify can be done easily if your codebase is not relying on Express-specific code (as it should be if done \xe0 la NestJS), you may only change req/res types from Fastify\u2019s Request and FastifyReply interfaces and probably have to replace the usage of some packages like helmet [to use helmet/fastify](https://docs.nestjs.com/security/helmet#use-with-fastify).\\n\\n## Other things to consider\\n\\nRule #0: **MEASURE!**\\n\\nBefore blaming the framework, we should make sure that our code is performant, that our usage of third-party components is efficient, and that our database queries are efficient.\\n\\n\\nThen we may start looking into other framework-related micro-optimizations:\\n\\n- Global pipes, middlewares, guards, and filters might not be always a good idea.\\n  They sometimes run unnecessary code for endpoints that don\u2019t need their transformations.\\n- Use lazy loading if it\u2019s relevant to your use case.\\n  Lazy loading defers module registration by loading them asynchronously to decrease application startup time (which might make sense in a serverless environment).\\n- If you are using the config module, and accessing environment variables using `process.env` might be slow, cashing can be a solution, see: [Cache environment variables](https://docs.nestjs.com/techniques/configuration#cache-environment-variables).\\n\\n## Final thoughts\\n\\nIt might be unfair to compare NestJS to Express, Hapi, Koa, or Fastify. We will find out that it\u2019s either slow, has a bigger memory footprint, or uses more CPU. That makes sense.\\n\\nNestJS takes care of a lot of things by default to offer a good and *\u201cflexible\u201d* developer experience with its built-in libraries and configurations making [micro-sacrifices of performance](https://stackoverflow.com/a/48226084/5078746), which can be accepted.\\n\\n\\n[![CodeAesthetic: Premature optimization](premature-optimization.png)](https://youtu.be/tKbV6BpH-C8)\\n\\nPremature optimization is evil, and if one really can spot performance decrease; Analysis must be done first, by applying the [20-80% rule](https://en.wikipedia.org/wiki/Pareto_principle), we may figure out that most performance hits are not directly related to the framework, but our code, our logic and the way we interact with third-parties.\\n\\nWe should first find the bottlenecks that are decreasing performance the most, fix them, monitor and then consider if it makes sense to push for more micro-optimizations."},{"id":"ctf-as-a-developer-pt-1-template-engines-ssti","metadata":{"permalink":"/blog/ctf-as-a-developer-pt-1-template-engines-ssti","source":"@site/blog/2023-09-07-ctf-as-dev-1-ssti/index.md","title":"CTF as a developer (Pt. 1): Template engines & SSTI","description":"Learning about cybersecurity as a developer by playing CTF (Part1: Template engines and SSTI)","date":"2023-09-07T00:00:00.000Z","formattedDate":"September 7, 2023","tags":[{"label":"backend","permalink":"/blog/tags/backend"},{"label":"cybersecurity","permalink":"/blog/tags/cybersecurity"},{"label":"frontend","permalink":"/blog/tags/frontend"}],"readingTime":7.36,"hasTruncateMarker":true,"authors":[{"name":"Abdeldjalil Fortas","title":"A part-time Karantika lover","url":"https://github.com/fcmam5","imageURL":"https://github.com/fcmam5.png","key":"fcmam5"}],"frontMatter":{"description":"Learning about cybersecurity as a developer by playing CTF (Part1: Template engines and SSTI)","slug":"ctf-as-a-developer-pt-1-template-engines-ssti","authors":["fcmam5"],"tags":["backend","cybersecurity","frontend"]},"unlisted":false,"prevItem":{"title":"Avoiding NestJS performance bottlenecks","permalink":"/blog/avoiding-nestjs-performance-bottlenecks"},"nextItem":{"title":"Trying to become a better developer by learning more about\xa0aviation","permalink":"/blog/trying-to-become-a-better-developer-by-learning-more-about-aviation"}},"content":"Being a software developer is a responsibility, it\u2019s a job where we provide secure and stable services and infrastructure to users who trust us (or trust regulations that ensure we are trustworthy).\\n\\nTo learn more about cybersecurity principles, and why some \u201cbest practices\u201d matter, I decided to play some CTF challenges instead of only relying on reading articles and scrolling into OWASP top 10\u2019s documentation.\\n\\nMy beginning was with HackTheBox. For some reason, some of the challenges I did had [Server-side Template Injection (SSTI)](https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server-side_Template_Injection) vulnerabilities which I\u2019m starting this blog series with.\\n\\n\x3c!-- truncate --\x3e\\n\\n> If you are a security professional or an experienced programmer this article might not bring you anything new, feel free to stop reading now, but I would appreciate your inputs, corrections and guidance!\\n\\n:::note\\nI published this article previously on Medium: [CTF as a developer (Pt. 1): Template engines & SSTI](https://medium.com/@Fcmam5/ctf-as-a-developer-pt-1-template-engines-ssti-b03c59e2c095)\\n:::\\n\\n## What are template engines?\\n\\nTemplate engines are tools that facilitate rendering content for web applications by injecting data into static templates.\\n\\nTemplate engines like [Jinja](https://github.com/pallets/jinja), [Handlebars](https://handlebarsjs.com/), [EJS](https://ejs.co/), or PHP\u2019s [Twig](https://twig.symfony.com/) provide more features for developers to add more logic (with variables, functions, loops, etc.) to templates which makes development and maintenance easier.\\n\\n## Server-side template injection (SSTI) vulnerabilities\\n\\nConsider this simple, and ugly app that greets the user every time they visit our `/greeting/<name>` route:\\n\\n```python\\nfrom flask import Flask, render_template_string\\nfrom random import choice\\n\\napp = Flask(__name__)\\n\\n@app.route(\\"/greeting/<name>\\")\\ndef greeting(name):\\n    greeting = choice([\\"Hi\\", \\"Hello\\", \\"Welcome\\"])\\n    template = \'\'\'\\n    <!DOCTYPE html>\\n    <html lang=\\"en\\">\\n    <head>\\n        <meta charset=\\"UTF-8\\" />\\n        <title>Greeting</title>\\n    </head>\\n    <body>\\n        <h1>\'\'\' + greeting + \' \' + name + \'\'\'!</h1>\\n    </body>\\n    </html>\'\'\'\\n    return render_template_string(template)\\n\\nif __name__ == \'__main__\':\\n    app.run(debug=True,port=8080)\\n```\\n\\nFor example, `GET /greeting/Alice` would show:\\n\\n![Example page](tpl-1.png)\\n\\nNow that we (or attackers) know that we are passing a user-provided variable to the template, we can experiment by passing a Jinja2 expression `{{ 2 + 2 }}`. In my case that would show:\\n\\n![Template injection example](tpl-2.png)\\n\\nThis means that the expression was evaluated as a Jinja template, which means that attackers can inject Python code that can do anything, for example running an `ls -R` on the application server\u2019s shell with an expression like the following:\\n\\n```python\\n{{request.application.__globals__.__builtins__.__import__(\'os\').popen(\'ls -R\').read()}}\\n```\\n\\nWhich will show:\\n\\n![ls -R](ls-r-injection.png)\\n\\nAttackers can be creative from here, they can run any command to upload/download more malicious scripts to our application servers which will give them more access and make things far easier for them.\\n\\nThe risks of such an attack are high, especially since even skiddies may use free scripts and tools that are available online to scan and exploit websites. The magical command:\\n\\n```python\\nrequest.application.__globals__.__builtins__.__import__(\'os\').popen(\'ls -R\').read()\\n```\\n\\nCan be found in serval blogs online along with other tricks for more powerful exploits. That means that anyone can exploit it, so please let\u2019s take it seriously.\\n\\nSecurity professionals and threat actors also rely on tools (such as [tplmap](https://github.com/epinna/tplmap)) to find and exploit real-world applications, which makes SSTI vulnerabilities critical to solve as they might be easy to find and exploit.\\n\\n## Why should I even care?\\n\\nEven if you are building a small side-project, you really have to not neglect basic security aspects.\\n\\nThreat actors may use your applications\u2019 servers as nodes in their botnets, or use them as proxies when performing attacks on more critical targets.\\nOr they would make your application server into a crypto-miner, or a platform to run their CPU-expensive applications.\\n\\nYou really don\u2019t want to have unnecessary cost and legal implications for just neglecting good practices.\\n\\n## Remediation\\n\\nThere are plenty of articles online by security professionals who\u2019d tell you how to protect yourself from SSTI and this one would only give typical recommendations:\\n\\n### NEVER trust client-side validation\\n\\nClient-side validation is for real application users, it offers guidance and early feedback if they insert any invalid input. It can never block any attack as it can easily bypassed with different techniques.\\n\\n![Programmerhummor: Client-side validation](client-side-validation.png)\\n\\nAs trivial as it sounds to any experienced developer or any security professional reading this, we still can find unprotected endpoints.\\n\\nThe absence of server-side validation might happen if applications are built by inexperienced and junior developers (WRITING about it, since I\u2019m guilty of this), or it may also happen correctly if front-end and backend developers are not aligned which would produce inconsistencies in validation rules.\\n\\n### Use well-maintained and known template engines\\n\\nSometimes [Linus\u2019s law](https://en.wikipedia.org/wiki/Linus%27s_law) applies; given enough eyeballs looking at a particular code, bugs and security issues will be discovered.\\n\\nTemplate engines like Jinja, EJS, or Twig are maintained by many smart developers who try to maintain them while keeping them safe.\\n\\nIf you are working on an application that would go to production, consider using stable and well-maintained libraries and keeping them up-to-date as they will always provide patches to any possible CVEs.\\n\\n### Read the documentation\\n\\nGood libraries are well-documented by the people who built them, and who are using them. You should always rely on the official documentation and not only blog articles and copying around code snippets from StackOverflow or some AI-generated tools.\\n\\nSometimes, defaults are evil, and sometimes they are \u201cthe safest\u201d option. Only a wise developer can understand how things work and how they should be used.\\n\\nFor example, my previous demo wouldn\u2019t work if I just used [flask.render_template_string](https://flask.palletsprojects.com/en/2.3.x/api/#flask.render_template_string) correctly by passing my variables as parameters and letting it synthesize the rendered expression\\n\\n```python\\ndef greeting(name):\\n    greeting = choice([\\"Hi\\", \\"Hello\\", \\"Welcome\\"])\\n    template = \'\'\'\\n    <!DOCTYPE html>\\n    <html lang=\\"en\\">\\n    <head>\\n        <meta charset=\\"UTF-8\\" />\\n        <title>Greeting</title>\\n    </head>\\n    <body>\\n        <h1> {{ greeting }} {{ name }}!</h1>\\n    </body>\\n    </html>\'\'\'\\n    return render_template_string(template, greeting=greeting, name=name)\\n```\\n\\nThen the passed value will be synthesized, and rendered as a string\\n\\n![Sanitized output](sanized-output.png)\\n\\n### Sanitizing inputs\\n\\nNot trusting any user-provided input by validating and sanitizing is a general rule when building applications.\\n\\nOne other piece of advice is to use libraries, and not overengineer another sanitization and/or validation library unless you have a very specific use case and enough resources to build it. It is hard to list and cover all possible scenarios and tricks by yourself.\\n\\n### Don\u2019t guide attackers\\n\\nUnless you reveal your technology stack or maintain an open-source application, attackers will scan your application to find which technology you are using before they try to exploit it.\\n\\nThere are plenty of template engines out there, and only by finding which technology is used in rendering them, attackers will save a lot of time that we would take in scanning and brute-forcing.\\n\\nTo hide which backend technology is used in your backend, or at least your front-end rendering service, we can follow these recommendations:\\n\\n- Make sure to not log any debug messages on the front-end and disable debug mode in your framework.\\n- Use non-standard framework error pages/messages, consider catching errors and returning your custom error pages. You can make them static (not rendering any variable or expression) unless you can really justify it.\\n- Remove `X-Powered-By`, `Server`, and any other HTTP headers that would expose your application server (e.g. `X-AspNet-Version`), or just a library like [Helmet](https://helmetjs.github.io/) for Node.js.\\n\\n### Do not trust your client-facing renderer application\\n\\nIf you are working on a critical application, you might be already applying a zero-trust system which would also affect your application deployment and architecture.\\n\\nIn case your renderer application is containerized, you can consider using distroless images which is a minimalistic setup for your application (removing shell and its utilities) which would limit what can be done if someone took over your application.\\n\\nRunning application processes as a non-root user, and having its filesystem set to read-only in addition to limiting its network access to internal infrastructure.\\n\\nThat may protect the infrastructure from having a backdoor in the renderer.\\n\\n## Final thoughts\\n\\nWe humans are the most vulnerable piece of any complex software system. We can introduce serious security flaws by being lazy or not taking things seriously or by sacrificing best practices for the sake of speed of delivery.\\n\\nSSTI is an example of vulnerabilities that might be easy to avoid by just educating ourselves that it\u2019s a risk, by spending some time adapting well-maintained templating engines and keeping them up-to-date or at least updating them when security patches are released.\\n\\nAdapting templating engines should be done with best practices and security by default. Then developers should have a good code review culture to make sure that libraries are used and configured as they should be.\\n\\nIf you are reading this blog and you are also one of us, who only learn by doing and by breaking things, have a look at these challenges from HackThe box:\\n\\n- https://app.hackthebox.com/challenges/395\\n- https://app.hackthebox.com/challenges/152\\n\\nOr, you can use these applications that are explicitly made to be vulnerable:\\n\\n- https://owasp.org/www-project-juice-shop/\\n- https://github.com/OWASP/NodeGoat\\n- https://github.com/appsecco/dvna\\n- https://github.com/CTFd/CTFd\\n\\nOr this lab from PortSwigger\u2019s [Web Security Academy](https://portswigger.net/web-security):\\n\\nhttps://portswigger.net/web-security/server-side-template-injection/exploiting\\n\\n### Resources\\n\\n- https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server-side_Template_Injection\\n- https://www.vaadata.com/blog/server-side-template-injection-vulnerability-what-it-is-how-to-prevent-it/\\n- https://portswigger.net/research/server-side-template-injection"},{"id":"trying-to-become-a-better-developer-by-learning-more-about-aviation","metadata":{"permalink":"/blog/trying-to-become-a-better-developer-by-learning-more-about-aviation","source":"@site/blog/2023-07-23-learning-from-aviation/index.md","title":"Trying to become a better developer by learning more about\xa0aviation","description":"What I learned from aviation as a software engineer.","date":"2023-07-23T00:00:00.000Z","formattedDate":"July 23, 2023","tags":[{"label":"development","permalink":"/blog/tags/development"}],"readingTime":15.3,"hasTruncateMarker":true,"authors":[{"name":"Abdeldjalil Fortas","title":"A part-time Karantika lover","url":"https://github.com/fcmam5","imageURL":"https://github.com/fcmam5.png","key":"fcmam5"}],"frontMatter":{"description":"What I learned from aviation as a software engineer.","slug":"trying-to-become-a-better-developer-by-learning-more-about-aviation","authors":["fcmam5"],"tags":["development"],"image":"header.png","hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"CTF as a developer (Pt. 1): Template engines & SSTI","permalink":"/blog/ctf-as-a-developer-pt-1-template-engines-ssti"},"nextItem":{"title":"I\u2019m learning front-end development, again \u2014 Part 1 (Browser rendering optimization)","permalink":"/blog/learning-front-end-development-again-part-1-browser-rendering-optimization"}},"content":"In the last few months, I started geeking more about aviation-related topics. Mostly by watching A LOT of videos explaining how things work, and how accidents happened in that highly regulated and safe field.\\n\\nI really don\u2019t know why the aviation domain precisely but, I think it has a sweet spot for me where I learn new things, while I let go of things I don\u2019t understand very well so that I don\u2019t dive too deep into searching and reading. For example, I can understand what \u201cWake turbulence\u201d is, but I can\u2019t explain it in physics terms, which is fine for a hobbyist.\\n\\n\x3c!-- truncate --\x3e\\n\\nIn a journey to become a better software engineer, I believe it\u2019s necessary to continuously improve my \u201cEngineer reflexes and intuitions\u201d, if I can call it that. It\u2019s basically having that sense that made seniors I worked with say: No I don\u2019t like that solution, I think it will cause XYZ. An answer like that was impressive to me, how could they bring all those exceptions and edge cases to the table and be that proactive?\\n\\n:::note\\nI published this article previously on Medium: [Trying to become a better developer by learning more about aviation](https://medium.com/@Fcmam5/trying-to-become-a-better-developer-by-learning-more-about-aviation-5241e7092f7e), it was - by far - my most popular post ever.\\n:::\\n\\n\\nThe answer was partially in the many aviation videos I watched: It\u2019s in training, a lot of training, and in learning about others\u2019 mistakes (because we can\u2019t afford to try them on our own) and in talking and reading, being open and up to date.\\n\\nIn a high-risk field, you would have smart people who are specialists in risk management, and together with engineers and inspectors they usually bring up standards, best practices, and patterns and concepts to follow.\\n\\n![Air Alg\xe9rie Flight 702P (Boeing 737) in the simulator from Mentour Pilot\u2019s video](header.png)\\n\\n\\nFrom those concepts, I learned about:\\n\\n**\u201cAviate, Navigate, Communicate\u201d** axiom\\n\\nWhen things go wrong pilots are trained to focus on actually keeping the airplane in the air, then they navigate. They decide where to go and land somewhere, and only when clearing that out do they communicate with Air traffic controllers, crew members and/or passengers.\\n\\nWe can also adopt similar practices as software engineers, or at least get inspired by them. For example, when dealing with production outages, it is more important sometimes to just keep production running and keep serving the users. Only after ensuring that, we may start looking into debugging and fixing those root causes. One of the most stressful things we go through during incidents is when POs or different managers come (or start calling) to ask for reports asking what happened and what is the estimated time to XYZ.\\n\\nI believe that engineers should first focus on fixing the problems and then they can jot down a postmortem report, or if possible they would delegate one communicator in the team who will be their only proxy to other parties. The communicator in charge will block the unnecessary panic questions, and will only report the team\'s findings and not their hypotheses.\\nIf you are an application owner, who needs to communicate to their users, you don\'t want to communicate what your engineers \\"think is the reason\\", or that \\"the fix may work\\", you just want to be sure and let your engineers do their jobs properly. So as in aviation: Communicate, comes after Aviate and Navigate.\\n\\n## Dr. Reason\'s Swiss cheese\xa0model\\n\\nAirplanes go through rough testing procedures. And before each flight, multiple parties need to check for different parts of the aircraft and its flight program.\\n\\nMaintenance staff must check the airplanes regularly, and before each flight, the pilots have a mandatory pre-flight check to perform from outside the aircraft and inside the cockpit. Each of these checks is a defense layer, and each layer might not be perfect due to human errors or lack of observations, or maybe the flaws are just hard or impossible to find easily.\\n\\n![Swiss cheese model\u200a-\u200aWikipedia](swiss-cheese-model.png)\\n\\nThis situation where flaws can bypass the many defense layers due to hazards and accidents leads to major accidents happening when all holes of the cheese are lined up which defined what\'s called a [\\"Dr. Reason\'s Swiss cheese model\\"](https://en.wikipedia.org/wiki/Swiss_cheese_model).\\n\\nAs software engineers, we have multiple defense layers to protect our applications, to ensure that our code is running as expected all the time.\\n\\nThese layers are defined by our code reviews, different test classes, and working with QA, security, and Operation teams.\\n\\nIn more critical environments, regulations may enforce having more layers, more SDLC controls, and even more \\"bureaucratic\\" operations to fulfill. This may create an unpleasant and unagile environment for us, the engineers, but it may make sense to protect our organization and our users as much as possible.\\n\\n## Build for resiliency and designed to fail\xa0safely\\n\\nAirplanes and pilots go through rough tests and simulations to prove their resilience, and even with that aircraft are designed and equipped to crash-land safely, they are equipped to land on water as well as land. Pilots are trained to fly and land in difficult situations that sometimes seem impossible.\\n\\nAs a software engineer, I always strive to build resilient and stable pieces of software, and I try my best to test it and cover as many edge cases as possible with different test suites. Even with that, I set it up to fail safely, it is cheaper to invest time and effort to design graceful shutdown mechanisms, error handling, and alerting system is better than having to debug or resolve issues in darkness when they happen in production.\\n\\nAdmitting that things can go wrong is an act of humbleness and engineering wisdom and an acknowledgment of common fallacies (such as the network being reliable, especially when operating on public Clouds). This makes me prepare for incidents and outages and feel comfortable with breaking things in DEV and staging environments. This will \\"prove\\" that other pieces of the system are resilient to continue operating, or at least not causing a domino effect.\\n\\nAs humans, we cannot always make smart decisions when being under stress, we tend to give up on our reflexes. And the only smart way to prepare for chaos is to train ourselves for those moments, to actually program our reflexes to do the \\"right\\" things, or at least to not panic and make more incidents look like other any other events happening at the job.\\n\\nIn a great talk by Amazon, this was addressed by AWS\'s Resilience Engineering team who are trained as firefighters who are trained for hours to handle emergencies.\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/ztiPjey2rfY?si=PHZiLg1wQ_iCyRn4\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n\\n## Checklists, Runbooks, and notes\\n\\nI learned that pilots have checklists for many scenarios, and they are continually checked and followed even if the pilots are operating the same airplane for long hours and probably flew and landed it hundreds of times, they still follow the same checklists because they don\u2019t want to miss any tiny detail.\\n\\nThese checklists can also cover incidents and what to do when a certain problem occurs, they may cover things that seem obvious to anyone but under stress, tiredness, and confusion they might be missed or done in the wrong way which can be fatal.\\n\\nIn addition to checklists, I learned that pilots communicate and keep a log of their actions, for example when taking off, the pilot will communicate their V1, VR, and V2, then they announce the speed when reaching it during the takeoff.\\n\\nThis is a learning for me as a software engineer, it is good practice to write Runbooks and keep notes whenever possible when designing, developing, and debugging software. This might come in handy to trace back issues or to learn and have the narrative behind decisions that are implemented.\\n\\nMaintaining troubleshooting guides is crucial to easily and quickly debug and spot common errors that might happen in the past, or that are expected, these guides should be maintained and updated with new learnings and incidents that can be mitigated in the future.\\n\\nWe are humans, we forget a lot and we don\u2019t know how to act well under stress, and also, we can\u2019t always have the same people who debugged a certain problem on-call 24/7, we must learn from them for the best of everyone.\\n\\n## It\u2019s a Semi-automated environment\\n\\nAutopilots nowadays are smart, they can fly and land an aircraft, and still, we need pilots to handle some situations manually.\\n\\nWhen the autopilot is flying the airplane, the pilot would be more in the monitoring mission. Air traffic controllers as well rely on instruments and \u201cintelligent\u201d software, but we still rely on the human factor to take decisions and to watch these instruments because software can be faulty, or it just cannot cover edge cases (like what happened in [06L at Toronto airport](https://www.youtube.com/watch?v=nj7nG6gJqsU)).\\n\\nSame as with software engineering, we have a lot of development, debugging, orchestrating, and monitoring tools that can do a lot for us but we still need to manage and configure them and sometimes just do things by ourselves since we might reach their limitations or we have an edge case that wasn\u2019t covered when they were built.\\n\\n## Have a \u201cUbiquitous language\u201d\\n\\nPilots who fly internationally don\u2019t only have to speak English, but they also have to use unambiguous jargon, they even have to spell important words in [NATO Phonetic alphabet](https://en.wikipedia.org/wiki/NATO_phonetic_alphabet) (Alpha, Bravo, Charlie\u2026). It is expected from any pilots, ATC operator, and investigator to differentiate between a Mayday and a PAN-PAN, to understand what airborne and \u201chold short\u201d mean.\\n\\nSimilarly, as software engineers, we do have our vocabulary, our wordings, and expressions but we sometimes tend to misuse some of them, or we don\u2019t pay attention to how words can have a huge impact on some of our decisions.\\n\\nThe term \u201cUbiquitous language\u201d was used by Eric Evans in his book [Domain-Driven Design: Tackling Complexity in the Heart of Software](https://www.amazon.de/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215), to define and build a common language between developers and different parties working and using the application, this ubiquitous language, when used in conversations between developers, testers, product owners and domain experts, based on a domain model that evolves with the product and with the team\u2019s understanding of the domain.\\n\\nThe common understanding and using the same common language should also affect the \u201cDoD and DoR\u201d, which always cause friction between business, product, development, and Ops teams. When \u201cReady\u201d and \u201cDone\u201d definitions are not clear, engineers may start working on tickets with undefined or unclear requirements which may lead to either an incomplete or an overengineered solution. And if the definition of \u201cDone\u201d is not clear, product and business teams may lose track of what the development team is working on, or developers may push incomplete features that might not be signed by QA.\\n\\n## Design good enough monitoring dashboards\\n\\nMonitoring aircraft, weather radars, and airports is a vital part of aviation. Sensors and computers are getting smarter and more accurate and that only can help pilots be more proactive, they can spot problems in their early stages and solve them seamlessly. But when technology fails to deliver, pilots\u2019 experience and training come to debug and find optimal solutions to overcome issues.\\n\\nAs software engineers we also care about our health checks, our metrics, and alerts, we may even go a little bit crazy and have verbose logs and over-crowded dashboards of metrics we rarely care about. We can have that as a learning and make sure to have habits to check monitoring dashboards regularly.\\n\\nAs developers, we love tools, we love dashboards, and we all love seeing our health checks green with no crazy spikes when we leave for our weekends. But experience and horror stories showed us that sometimes these monitoring dashboards might not be reliable and most of the time it\u2019s because of the way we set them up, and a few times they\u2019re buggy or affected by infrastructure outages, for example, this:\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/mrp1F2rezdw?si=WmeRbiD8aiUS9Ufr&amp;start=2278\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n\\nThis and other lessons taught us that we should invest in having a set of health checks and monitoring dashboards, and all of them need to be carefully set up.\\n\\nOne other thing to consider is that we need to avoid noise when it comes to dashboards, we should have a smart optimal set of metrics and views to monitor or it will be overwhelming to process what\u2019s going wrong by looking at the screen regularly.\\n\\n## Treat warnings and alerts as WARNINGS and ALERTS!\\n\\nWe are all guilty of ignoring warnings in our applications and different monitoring and scanning consoles. We think that we know that some of them are false positives, irrelevant, not urgent, or just another \u201cnot my problem\u201d labeled thing.\\n\\nAfter a while we get immune, we stop caring and noticing \u201creal warnings\u201d when they happen so we don\u2019t act on them on time.\\n\\nAlerts are even more critical, and similarly to aviation fields, if they happen we should **really** react to that, if we ever think that alert is a false positive one, we should try to tag it so we can improve our alerting and monitoring systems. We don\u2019t want to become numb to these alerts so we just ignore them or treat them seriously and react to them in time.\\n\\n## Simulators\\n\\nPilots spend hours training on simulators that are as realistic as it gets before they actually start flying real planes.\\n\\nAnd that\u2019s a lesson for us, as expensive as it is to have staging and/or pre-prod environments that are protected and close to production they might be cheaper than dealing with problems in production. These environments must be kept clean and protected as we would treat production to see how our applications can be deployed and run without any hacks or manual interventions from us, while we may lose restrictions on DEV environments and give developers more freedom to experiment and safely break things.\\n\\nOne other lesson we learn from simulators is again: Everyone needs training. We don\u2019t want improvisations and risky fixes on production.\\n\\nAs referred to in the talk I shared from AWS team, they make sure to train their engineers to handle outages so that when that happens they know what to do without panicking (hopefully).\\n\\n## No matter how experienced you are, take your time learning new tools\\n\\nA pilot\u2019s experience is evaluated by their flying hours, and when a certain pilot is flying commercially they\u2019re evaluated by their total flying hours and the number of hours they flew on that type (particular airplane model).\\n\\nAs software engineers, we have a big ego, we think we are smart and we know that after years of experience, we can absorb anything new in our ecosystem easily.\\n\\nAs a JavaScript developer, I\u2019m confident that I can switch to any framework and library just by spending a few hours looking into the documentation or by reading other people\u2019s code examples, after all, it\u2019s just JavaScript. However, with that mentality and with some over-confidence I may overlook certain caveats, or certain \u201cgood practices\u201d if I don\u2019t pay enough attention to the documentation and give new tools, concepts, and technologies their fair amount of time and focus.\\n\\n## Take rest, respect your time off if you care about your job\\n\\nFatigue is a major factor in many accidents. That made regulators and companies ensure, and enforce having a good amount of rest for pilots.\\n\\nIf pilots operate for long hours or they did not have quality rest they will have poor judgment, decision-making, and flying abilities. This may cause a failure in assessing different flying scenarios and challenges.\\n\\nWhile writing this article, one of my favorite aviation channels published this video about my country\u2019s aviation company. It fits perfectly with, this section\u2019s point so I thought I would speak about it here:\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/o57gCc-_oPY?si=be5JuUCAxeI72K6x\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n\\nAs software engineers, we do relate to situations where tiredness can cause a fatal accident. How many times have we thought we\u2019d push ourselves and work for extra minutes and ended up creating bugs and incidents that took us hours to fix?\\n\\n![Monkeyuser: Quick fix](monkeyuser-quickfix.png)\\n\\nThe moral of this was synthesized in Uncle Bob\u2019s Clean Coder book:\\n\\n> \u201cDon\u2019t write code when you are tired. Dedication and professionalism are more about discipline than hours. Make sure that your sleep, health, and lifestyle are tuned so that you can put in eight good hours per day.\u201d \u2014 Robert C. Martin (Uncle Bob), The clean coder\\n\\nAnd:\\n\\n> \u201cIf you are tired or distracted, do not code. You\u2019ll only wind up redoing what you did. Instead, find a way to eliminate the distractions and settle your mind.\u201d \u2014 Robert C. Martin (Uncle Bob), The clean coder\\n\\nOne other trap we may fall into is that \u201cif I ever stop here I would forget where I stopped\u201d or something like \u201cI\u2019m sick of this and I want to start my next day by working on something other than this\u201d And we end up rushing, designing and writing things we forget due to fatigue later and might also clumsy and be of low quality.\\n\\n> \u201cCan\u2019t go home till you solve this problem? Oh yes you can, and you probably should! Creativity and intelligence are fleeting states of mind. When you are tired, they go away. If you then pound your nonfunctioning brain for hour after late-night hour trying to solve a problem, you\u2019ll simply make yourself more tired and reduce the chance that the shower, or the car, will help you solve the problem.\\n> When you are stuck, when you are tired, disengage for awhile. Give your creative subconscious a crack at the problem. You will get more done in less time and with less effort if you are careful to husband your resources.\u201d \u2014 Robert C. Martin (Uncle Bob), The clean coder\\n\\nI learned that taking time off and having real weekends and vacations is an investment in your professional life. In your time off, you don\u2019t work, don\u2019t think about work, and only care about your health, family, and enjoying your time. Once you are back, you will find yourself more motivated, more focused and, your passion or your interest refreshed."},{"id":"learning-front-end-development-again-part-1-browser-rendering-optimization","metadata":{"permalink":"/blog/learning-front-end-development-again-part-1-browser-rendering-optimization","source":"@site/blog/2018-05-06-learning-fe-again/index.md","title":"I\u2019m learning front-end development, again \u2014 Part 1 (Browser rendering optimization)","description":"TLDR; I disregarded front-end development until I started reading about some of its advanced concepts and challenges, I learned more about browser rendering optimization, website performances, and web accessibility. In this article, I\u2019m going to share some notes I took when learning browser rendering optimization.","date":"2018-05-06T00:00:00.000Z","formattedDate":"May 6, 2018","tags":[{"label":"frontend","permalink":"/blog/tags/frontend"},{"label":"development","permalink":"/blog/tags/development"}],"readingTime":12.885,"hasTruncateMarker":true,"authors":[{"name":"Abdeldjalil Fortas","title":"A part-time Karantika lover","url":"https://github.com/fcmam5","imageURL":"https://github.com/fcmam5.png","key":"fcmam5"}],"frontMatter":{"slug":"learning-front-end-development-again-part-1-browser-rendering-optimization","authors":["fcmam5"],"tags":["frontend","development"],"hide_table_of_contents":false},"unlisted":false,"prevItem":{"title":"Trying to become a better developer by learning more about\xa0aviation","permalink":"/blog/trying-to-become-a-better-developer-by-learning-more-about-aviation"}},"content":"*TLDR; I disregarded front-end development until I started reading about some of its advanced concepts and challenges, I learned more about browser rendering optimization, website performances, and web accessibility. In this article, I\u2019m going to share some notes I took when learning browser rendering optimization.*\\n\\n\x3c!-- truncate --\x3e\\n\\n:::note\\nI published this article previously on Medium: [I\u2019m learning front-end development, again \u2014 Part 1 (Browser rendering optimization)](https://medium.com/@Fcmam5/im-learning-front-end-development-again-part-1-browser-rendering-optimization-c8359ee90c40)\\n\\n:::\\n\\nI thought that front-end development was only about making beautiful user interfaces, responsive and mobile-friendly websites that load fast. I imagined that a Front-end Developer was someone who knows more HTML tags, CSS properties and knows how to manipulate DOM with and/or without jQuery, and who knows how things should look and feels when using his applications, and that a front-end developer is only a creative person who knows how to convert mockups to HTML and CSS, who works with React, Angular and Vue.js. And that the backend developer is the smart developer who does the big things in any web application, this one -for me- who\u2019s responsible for the hard part by dealing with a database, Files I/O, authentication, security, and performance...\\n\\nApparently, working with HTML, CSS, and JavaScript and designing user interfaces is not that interesting like building backends and dealing with \u201creal challenges\u201d, so why do companies invest in recruiting front-end developers for \u201cJust designing interfaces\u201d? Why front-end development is a separate and well-paid specialty? Looking for an answer, I started a journey of reading and learning \u201cAdvanced front-end development\u201d articles and lessons to know how it feels to be a front-end developer, what are their/our challenges, and why there are people specialized in that.\\n\\nThis week, I will be reading and taking notes for what I learned, if it seems complicated, boring or confusing to you, that will be the answer to my questions, it will explain why there are front-end developers, the persons who care about all of that and maybe more!\\n\\nThe journey will be guided by [FrontEnd developer handbook 2018](https://frontendmasters.com/books/front-end-handbook/2018/). So let\u2019s get started in learning front-end development.\\n\\nFirst, as front-end developers, we shouldn\u2019t only design beautiful websites. We must take care of things beyond the good-looking design, as specialists and developers, building usable, accessible, and performant web pages is our challenge.\\n\\nIt seems challenging, Nice!<br/>\\nLet\u2019s get it started.\\n\\n## Website performances\\n\\n> Bad performance kills good sites \u2014 [Paul Lewis](https://twitter.com/aerotwist) at [ud860](https://classroom.udacity.com/courses/ud860/lessons/4138328558/)\\n\\n### How browsers works\\n\\nWe can\u2019t optimize or work on websites performances without knowing how the browsers that display their UIs work.\\n\\n![Quantum Up close: What is a browser engine](browser-engine.png)\\n\\nSo let\u2019s look under the hood.\\n\\n![Browser components \u2014 HTML5 Rocks](browser-components.png)\\n\\nWeb browsers are composed of a UI, a browser engine that transfers the actions between the UI and the rendering engine, the rendering engine displays the HTML and CSS after parsing it. Browsers also have a data storage layer where data are stored locally as cookies, localStorage, and also IndexedDB, WebsSQL, and FileSystem. There\u2019s also networking (Where HTTP, DNS\u2026 are handled), JS interpreter, and UI backend.\\n\\n![Quantum Up close: What is a browser engine](what-is-browser-engine.png)\\n\\n### Render Tree\\n\\nBrowser engines parse the HTML and CSS, construct the DOM, calculate the styles and display the web page after composing multiple layers.\\n\\nAfter parsing HTML, the browser start constructing the render tree, it\u2019s like the DOM tree with no `<head>` element, no hidden elements by `display:none` and with CSS pseudo-elements added to the tree-like\\n\\n```css\\nh1::before {\\n content: \\"Hello Africa\\";\\n}\\n```\\n\\nWill construct a node like the DOM\u2019s nodes. After this step, CSS will be added alongside media, the web page will be composited by multiple layers.\\n\\nRead more at:\\n\\n- [HTML5Rocks : How browsers work](https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/)\\n- [Quantum Up close: What is a browser engine](https://hacks.mozilla.org/2017/05/quantum-up-close-what-is-a-browser-engine/)\\n\\n### Optimize the browser rendering\\n\\nUnderstanding how \u201cBrowsers work\u201d was to learn \u201cHow to optimize the rendering process\u201d and to make websites that load and work smoothly. In order to deepen my knowledge and to jump to a practical course, I started [Udacity\u2019s Browser optimization](https://classroom.udacity.com/courses/ud860/) course, where I understood more core concepts of browser rendering. Now, let\u2019s dive into the rendering process.\\n\\n### 60fps and Device Refresh Rates\\n\\nUsers expect the web page that they are visiting to be interactive and smooth, working on web performance doesn\'t mean we only need to make pages load fast, but we need to make sure that they are running, scrolling fast, animations should be smooth.\\n\\nHTML, CSS, and JavaScript are handled by browsers, most devices running these browsers refresh their screens 60 times a second (it means that we have 60FPS or one Frame per 16.6666ms). All our animations should be under a score of 10ms (source: [Google Developers: Rendering performance](https://developers.google.com/web/fundamentals/performance/rendering/)).\\n\\nIn order to achieve that, we must know more about the Pixel pipeline.\\n\\n![The pixel pipeline, source: Google Developers: Rendering performance](rendering-cycle.png)\\n\\n\\n- **JavaScript** most of the time, JS is used to make visual changes to our web pages, by adding DOM elements to our pages, changing styles\u2026\\n- **Style calculations** are the process of calculating what CSS rules to apply on which element based on matching selectors.\\n- **Layout** is the process of calculating spaces, widths of the `<body>` element, and its children\'s widths.\\n- **Paint** is the process of filling in pixels by drawing out texts, colors, images, shadows, and every visual part of each element, drawing is done onto multiple layers.\\n\\n![Firefox\u2019s 3D view \u2014 Firefox Developers tools](ffx-3d-view.png)\\n\\n- **Compositing** is the process of calculating and drawing each element\u2019s order so that the page renders correctly.\\n\\nWe won\u2019t always solicit every part of the pipeline on every frame, the fewer properties are changed the fewer calculations we do.\\n\\nThis part taught me that some tasks are more expensive than others, some CSS properties like changing a certain element\u2019s position may cause Style calculations, Layout calculations, Paint and composite processes and that\u2019s expensive. While changing the `cursor` property won\u2019t affect the layout or painting, it will be carried out by the compositor thread with the help of the GPU.\\n\\n![Cursor CSS property on CSS Triggers](cursor-css.png)\\n\\n> Performance is the art of avoiding work, and making any work you do as efficient as possible. \u2014 [Google Developers: Rendering performance](https://developers.google.com/web/fundamentals/performance/rendering/).\\n\\nI learned all these valuable information from:\\n\\n- [Browser rendering and optimization: Layout and paint](https://classroom.udacity.com/courses/ud860/lessons/4138328558/concepts/41373290750923)\\n- [Google Developers: Rendering performance](https://developers.google.com/web/fundamentals/performance/rendering/)\\n- [CSS Triggers](https://csstriggers.com/)\\n\\n### RAIL (Response, Animate, Idle, Load)\\n\\nRAIL is a performance model, RAIL\u2019s goals and guidelines help us to ensure a good UX.\\n\\n![The 4 parts of the RAILS performance model](rails.png)\\n\\nIn Udacity course, the teachers suggested these metrics.\\n\\n![Udacity\u2019s Browser rendering optimization course: RAIL Response](rails-udacity.png)\\n\\nUsers dislike when animations aren\u2019t smooth, with 60 frames rendered every second, animations should be at 16ms per frame. When it comes to response, users want to feel that the results are immediate, any delay between action and reaction is non-accepted.\\n\\nIt is true that mobile users, especially those who are using slow 3G connections, it is a realistic goal to load pages in 5000ms, but they accept to wait for sites to respond to their inputs, not for sites to load. So it is important to load as little data as possible so the user starts using the page while loading the complete extra loadings.\\n\\n\\nWe can also load complex animations upfront (see more about [**F**irst **L**ast **I**nvert **P**lay](https://youtu.be/H3z97NcAbCI)).\\n\\nAt the end of this point, I would like to share with you these useful links by [Google Developers: RAIL Tools](https://developers.google.com/web/fundamentals/performance/rail#tools).\\n\\n### JavaScript: Understand how it works on the browser then optimize!\\n\\nJavaScript engines in web browsers interpret the JavaScript utilizing JIT compilers to transform the JS code to byte-code.\\n\\nEach JavaScript engine implements a version of ECMAScript, a JavaScript dialect and that\u2019s why we have [different browser support for ES6, ES7 \u2026](https://kangax.github.io/compat-table/es6/)\\n\\n> The goal of a JavaScript engine\u2019s code parsing and execution process is to generate the most optimized code in the shortest possible time. \u2014 Jen Looper, [A Guide to JavaScript Engines for Idiots](https://developer.telerik.com/featured/a-guide-to-javascript-engines-for-idiots/)\\n\\nJavaScript code, could not be optimized by hacking the \u201cmicro-optimizations\u201d of the JIT compilers.\\n\\nSo, in order to optimize JavaScript, there are many things we should ensure, one of them is to run JavaScript as earlier as possible at the begging of each frame (that\u2019s why we discussed the pixel pipeline and RAIL).\\n\\nModern browsers provide a `requestAnimationFrame` function that schedules JavaScript to run as earlier as possible at the begging of the frame.\\n\\n![Using requestAnimationFrame (example from Udacity\u2019s course)](requestAnimationFrame.png)\\n\\nAlso, when it comes to \u201cJavaScript optimization\u201d, Web workers will be our friends, they allow us to run JavaScript on a totally different thread, they can perform I/O without interfering with the main browser thread, Web Workers can communicate with the main JavaScript code (that created it) by messages. Read more at [Web Worker Documentation on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers).\\n\\nFor example, we gonna pass a string to a worker in workerFile.js the worker will return the message to the main script.\\n\\nMain script:\\n\\n```javascript\\nvar worker = new Worker(\'workerFile.js\');\\n\\nworker.addEventListener(\'message\', function(e) {\\n  console.log(\'Worker said: \', e.data);\\n}, false);\\n\\nworker.postMessage(\'Hello World\'); // Send data to our worker.\\n```\\n\\nAnd workerFile.js (the worker):\\n\\n```javascript\\nself.addEventListener(\'message\', function(e) {\\n  self.postMessage(e.data.toUpperCase);\\n}, false);\\n```\\n\\nThe example is from [HTML5Rocks: The basics of Web workers](https://www.html5rocks.com/en/tutorials/workers/basics/).\\n\\n\\nWhen talking about **memory management in JavaScript**, we can only rely on JavaScript\u2019s **garbage collector**, JavaScript doesn\'t have memory or pointers management functions such as `malloc()` and `free()`, so in this case **Variables Scopes**, and **functions calls**. For example:\\n\\nWhen declaring a local variable inside a function, the allocated space for this variable will be freed after using it.\\n\\n```javascript\\nfunction foo(arg) {\\n    var bar = \\"this is a local variable\\";\\n}\\n```\\n\\nBut, when using global variables accidentally, we will be using a memory space all the time.\\n\\n```javascript\\nfunction foo(arg) {\\n    bar = \\"this is a hidden global variable\\";\\n}\\n```\\n\\nAnother way where global variables could be created accidentally through this when the function is called on the global scope, for example:\\n\\n```javascript\\nfunction foo() {\\n    this.variable = \\"potential accidental global\\";\\n}\\n\\n// Foo called on its own, this points to the global object (window)\\n// rather than being undefined.\\nfoo();\\nconsole.log(variable); // will return \\"potential accidental global\\" and not undefined\\n```\\n\\n*This example is taken from an [auth0 forum article](https://auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/).*\\n\\n\\nAlso, sometimes when performing an animation and when working with timers and callbacks, for example `setInterval` is used to perform a certain temporary animation, then it won\u2019t be necessary, let\u2019s check [this example](https://jsfiddle.net/Fcmam5/zswbd3eL/):\\n\\n\\n```javascript\\nvar clientCountElement = document.getElementById(\'visitors\');\\nvar ourClients = getData(); // returns 100 for example\\nvar clientCounter = 0;\\nsetInterval(function() {\\n  if (ourClients > clientCounter) {\\n    clientCounter++;\\n    clientCountElement.innerHTML = String(clientCounter);\\n  }\\n}, 10);\\n```\\n\\n\\nWhen `clientCounter` reaches the `ourClients` the animation will stop, the visitor number won\u2019t be incremented but the callback will continue the execution. So, the timers like `setTimeout` and `setInterval` must be cleared after finishing the desired action. For my example I tried this:\\n\\n\\n```javascript\\nvar clientCountElement = document.getElementById(\'visitors\');\\nvar ourClients = getData(); // returned 100\\nvar clientCounter = 0;\\nvar animation = setInterval(function() {\\n      if (ourClients > clientCounter) {\\n        clientCounter++;\\n        clientCountElement.innerHTML = String(clientCounter);\\n      } else {\\n        // Here we cleanup after finishing our animation\\n        clearInterval(animation);\\n        delete animation;\\n      }\\n    }, 10);\\n```\\n\\nAnd that created a difference, as in this live preview using [Google Chrome\u2019s Task Manager](https://developers.google.com/web/tools/chrome-devtools/memory-problems/).\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/epkuTNmH7wc?si=gRuTfCjQSAZdvYar\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n\\nTimers also may cause another problem, they may run at the end of the frame so it may cause us a missing frame.\\n\\n![Google developers: Optimize JavaScript execution](timers-exec.png)\\n\\nSo, the solution for that is \u201cUsing `requestAnimationFrame`\u201d. As in this example from [Google developers](https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution):\\n\\n```javascript\\n/**\\n * If run as a requestAnimationFrame callback, this\\n * will be run at the start of the frame.\\n */\\nfunction updateScreen(time) {\\n  // Make visual updates here.\\n}\\n\\nrequestAnimationFrame(updateScreen);\\n```\\n\\nAnother memory leak is **Out of DOM references**, for example when storing a table cell node (`<td>`), then deleting the table node from the DOM for some reason. The table will be removed from the DOM, but it will stay in memory, the table cell is a child node of `<table>` and children keep references to their parents, so the reference to the table cell causes the whole table to stay in memory.\\n\\n* [ECMAScript Compatibility table](https://kangax.github.io/compat-table/)\\n    \\n* [A Guide to JavaScript Engines for Idiots](https://developer.telerik.com/featured/a-guide-to-javascript-engines-for-idiots/)\\n    \\n* [Why Is JavaScript So Fast? (aka JavaScript Engines \u2014 How Do They Even?)](https://www.youtube.com/watch?v=pmtwUOHLgq4)\\n    \\n* [Web Worker Documentation on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers)\\n    \\n* [HTML5 Rocks: The basics of web workers](https://www.html5rocks.com/en/tutorials/workers/basics/)\\n    \\n* [Google developers: Optimize JavaScript execution](https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution)\\n    \\n* [Auth0: 4 Types of Memory Leaks in JavaScript and How to Get Rid Of Them](https://auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/)\\n\\n### CSS optimizations matter too!\\n\\nWhen optimizing our web pages, we must take care of CSS too. Using [BEM (Block Element Modifier) methodology](https://en.bem.info/methodology/key-concepts/#bem-entity) is recommended, it\u2019s simpler, reusable, and more optimal. It\u2019s easier for browsers to math CSS classes than to calculate `nth-child(n)`, it seems logical: Matching an element is faster than calculating \u201cWhich element it is?\u201d than matching that calculated result.\\n\\n![Udacity: Browser rendering (Selector matching)](udacity-selector-matching.png)\\n\\n\\nAlso, we must [avoid Forced Synchronous Layout](https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing#avoid_forced_synchronous_layouts). It\u2019s happened when we force the browser to perform layout earlier with JavaScript, normally the Layout should be changed after style calculations that came after running JavaScript.\\n\\n![Udacity: Browser rendering (FSL)](fsl.png)\\n\\nFSL (Forced Synchronous Layout) could be even worse, when not avoiding [Layout trashing](https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing#avoid_layout_thrashing), like we don\u2019t care if we calculate widths, heights, margins and offset each time by calling functions like `.offsetHeight` inside a loop.\\n\\nFor example, this:\\n\\n```javascript\\n// Read.\\nvar width = box.offsetWidth;\\n\\nfunction resizeAllParagraphsToMatchBlockWidth() {\\n  for (var i = 0; i < paragraphs.length; i++) {\\n    // Now write.\\n    paragraphs[i].style.width = width + \'px\';\\n  }\\n}\\n```\\n\\nIs more optimal than\\n\\n```javascript\\nfunction resizeAllParagraphsToMatchBlockWidth() {\\n\\n  // Puts the browser into a read-write-read-write cycle.\\n  for (var i = 0; i < paragraphs.length; i++) {\\n    paragraphs[i].style.width = box.offsetWidth + \'px\';\\n  }\\n}\\n```\\n\\nSources:\\n\\n*   [Google Developers: Avoid Large, Complex Layouts and Layout Thrashing](https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing)\\n    \\n*   [Udacity: Browser rendering optimization](https://classroom.udacity.com/courses/ud860)\\n  \\n### Measure first, then optimize\\n\\n![Udaciry\u2019s Browser rendering optimization DevTools Timeline Practice: Measure first](focus-on-the-cause-measure.png)\\n\\n\\nGoogle Chrome and Firefox provide powerful testing, debugging, and measurement tools. In [Udacity\u2019s course(Under a title of \u201cWeapons of junk destruction\u201d)](https://classroom.udacity.com/courses/ud860) I learned a little to how to measure the performance. Firefox also provides a powerful [Performance measurement tool in his DevTools](https://developer.mozilla.org/son/docs/Tools/Performance).\\n\\nWhen working on website performance, we must always measure, at the begging and after performing any modifications, we must not \u201c**Try to solve problems that we don\u2019t have**\u201d.\\n\\nSomehow, when taking a rest from writing, I visited Facebook where I found that freeCodeCamp posted this great talk!\\n\\n<iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/v5r_n6Tq0uk?si=V3IxwaZYrGZTww35\\" title=\\"YouTube video player\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" referrerpolicy=\\"strict-origin-when-cross-origin\\" allowfullscreen></iframe>\\n\\n\\n<br/>\\n\\nMy first week ends here, and that was what I learned. I really don\u2019t know \u201cHow it feels to be a front-end developer\u201d, how do the professional front-end developers work, and do they really care about this? I really want to hear anything from you, the front-end developers especially!\\n\\nI enjoyed studying this week, I understood the rendering process, and that everything matters. Some of the concepts seemed harder to understand so I looked up to them, I needed more resources to understand them. Trying to take notes about what I\u2019m learning on this article obliged me to do more efforts to understand all that I need to write, and I needed to write all the interesting things I read, so writing was a motivation for me!"}]}')}}]);