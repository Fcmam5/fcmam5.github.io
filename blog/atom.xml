<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fcmam5.me/blog</id>
    <title>Abdeldjalil Fortas' notepad Blog</title>
    <updated>2023-07-23T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fcmam5.me/blog"/>
    <subtitle>Abdeldjalil Fortas' notepad Blog</subtitle>
    <icon>https://fcmam5.me/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Trying to become a better developer by learning more about aviation]]></title>
        <id>https://fcmam5.me/blog/trying-to-become-a-better-developer-by-learning-more-about-aviation</id>
        <link href="https://fcmam5.me/blog/trying-to-become-a-better-developer-by-learning-more-about-aviation"/>
        <updated>2023-07-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[What I learned from aviation as a software engineer.]]></summary>
        <content type="html"><![CDATA[<p><img decoding="async" loading="lazy" alt="Air Algérie Flight 702P (Boeing 737) in the simulator from Mentour Pilot’s video" src="https://fcmam5.me/assets/images/header-875c369358734bf131bf0d772601e849.png" width="2852" height="1446" class="img_H9vG"></p>
<p>In the last few months, I started geeking more about aviation-related topics. Mostly by watching A LOT of videos explaining how things work, and how accidents happened in that highly regulated and safe field.</p>
<div class="theme-admonition theme-admonition-note admonition_qa_F alert alert--secondary"><div class="admonitionHeading_nrGX"><span class="admonitionIcon_Rwg1"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_AI9x"><p>This blog was originally published on medium (<a href="https://medium.com/@Fcmam5/trying-to-become-a-better-developer-by-learning-more-about-aviation-5241e7092f7e" target="_blank" rel="noopener noreferrer">Trying to become a better developer by learning more about aviation</a>), it was - by far - my most popular post ever.</p></div></div>
<p>I really don’t know why the aviation domain precisely but, I think it has a sweet spot for me where I learn new things, while I let go of things I don’t understand very well so that I don’t dive too deep into searching and reading. For example, I can understand what “Wake turbulence” is, but I can’t explain it in physics terms, which is fine for a hobbyist.</p>
<p>In a journey to become a better software engineer, I believe it’s necessary to continuously improve my “Engineer reflexes and intuitions”, if I can call it that. It’s basically having that sense that made seniors I worked with say: No I don’t like that solution, I think it will cause XYZ. An answer like that was impressive to me, how could they bring all those exceptions and edge cases to the table and be that proactive?</p>
<p>The answer was partially in the many aviation videos I watched: It’s in training, a lot of training, and in learning about others’ mistakes (because we can’t afford to try them on our own) and in talking and reading, being open and up to date.</p>
<p>In a high-risk field, you would have smart people who are specialists in risk management, and together with engineers and inspectors they usually bring up standards, best practices, and patterns and concepts to follow.</p>
<p>From those concepts, I learned about:</p>
<p><strong>“Aviate, Navigate, Communicate”</strong> axiom</p>
<p>When things go wrong pilots are trained to focus on actually keeping the airplane in the air, then they navigate. They decide where to go and land somewhere, and only when clearing that out do they communicate with Air traffic controllers, crew members and/or passengers.</p>
<p>We can also adopt similar practices as software engineers, or at least get inspired by them. For example, when dealing with production outages, it is more important sometimes to just keep production running and keep serving the users. Only after ensuring that, we may start looking into debugging and fixing those root causes. One of the most stressful things we go through during incidents is when POs or different managers come (or start calling) to ask for reports asking what happened and what is the estimated time to XYZ.</p>
<p>I believe that engineers should first focus on fixing the problems and then they can jot down a postmortem report, or if possible they would delegate one communicator in the team who will be their only proxy to other parties. The communicator in charge will block the unnecessary panic questions, and will only report the team's findings and not their hypotheses.
If you are an application owner, who needs to communicate to their users, you don't want to communicate what your engineers "think is the reason", or that "the fix may work", you just want to be sure and let your engineers do their jobs properly. So as in aviation: Communicate, comes after Aviate and Navigate.</p>
<h2 class="anchor anchorWithStickyNavbar_PV8p" id="dr-reasons-swiss-cheesemodel">Dr. Reason's Swiss cheese&nbsp;model<a href="https://fcmam5.me/blog/trying-to-become-a-better-developer-by-learning-more-about-aviation#dr-reasons-swiss-cheesemodel" class="hash-link" aria-label="Direct link to Dr. Reason's Swiss cheese&nbsp;model" title="Direct link to Dr. Reason's Swiss cheese&nbsp;model">​</a></h2>
<p>Airplanes go through rough testing procedures. And before each flight, multiple parties need to check for different parts of the aircraft and its flight program.</p>
<p>Maintenance staff must check the airplanes regularly, and before each flight, the pilots have a mandatory pre-flight check to perform from outside the aircraft and inside the cockpit. Each of these checks is a defense layer, and each layer might not be perfect due to human errors or lack of observations, or maybe the flaws are just hard or impossible to find easily.</p>
<p><img decoding="async" loading="lazy" alt="Swiss cheese model - Wikipedia" src="https://fcmam5.me/assets/images/swiss-cheese-model-b6158b86eb9f97052e01bb53fef76224.png" width="1600" height="584" class="img_H9vG"></p>
<p>This situation where flaws can bypass the many defense layers due to hazards and accidents leads to major accidents happening when all holes of the cheese are lined up which defined what's called a <a href="https://en.wikipedia.org/wiki/Swiss_cheese_model" target="_blank" rel="noopener noreferrer">"Dr. Reason's Swiss cheese model"</a>.</p>
<p>As software engineers, we have multiple defense layers to protect our applications, to ensure that our code is running as expected all the time.</p>
<p>These layers are defined by our code reviews, different test classes, and working with QA, security, and Operation teams.</p>
<p>In more critical environments, regulations may enforce having more layers, more SDLC controls, and even more "bureaucratic" operations to fulfill. This may create an unpleasant and unagile environment for us, the engineers, but it may make sense to protect our organization and our users as much as possible.</p>
<h2 class="anchor anchorWithStickyNavbar_PV8p" id="build-for-resiliency-and-designed-to-failsafely">Build for resiliency and designed to fail&nbsp;safely<a href="https://fcmam5.me/blog/trying-to-become-a-better-developer-by-learning-more-about-aviation#build-for-resiliency-and-designed-to-failsafely" class="hash-link" aria-label="Direct link to Build for resiliency and designed to fail&nbsp;safely" title="Direct link to Build for resiliency and designed to fail&nbsp;safely">​</a></h2>
<p>Airplanes and pilots go through rough tests and simulations to prove their resilience, and even with that aircraft are designed and equipped to crash-land safely, they are equipped to land on water as well as land. Pilots are trained to fly and land in difficult situations that sometimes seem impossible.</p>
<p>As a software engineer, I always strive to build resilient and stable pieces of software, and I try my best to test it and cover as many edge cases as possible with different test suites. Even with that, I set it up to fail safely, it is cheaper to invest time and effort to design graceful shutdown mechanisms, error handling, and alerting system is better than having to debug or resolve issues in darkness when they happen in production.</p>
<p>Admitting that things can go wrong is an act of humbleness and engineering wisdom and an acknowledgment of common fallacies (such as the network being reliable, especially when operating on public Clouds). This makes me prepare for incidents and outages and feel comfortable with breaking things in DEV and staging environments. This will "prove" that other pieces of the system are resilient to continue operating, or at least not causing a domino effect.</p>
<p>As humans, we cannot always make smart decisions when being under stress, we tend to give up on our reflexes. And the only smart way to prepare for chaos is to train ourselves for those moments, to actually program our reflexes to do the "right" things, or at least to not panic and make more incidents look like other any other events happening at the job.</p>
<p>In a great talk by Amazon, this was addressed by AWS's Resilience Engineering team who are trained as firefighters who are trained for hours to handle emergencies.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/ztiPjey2rfY?si=PHZiLg1wQ_iCyRn4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe>
<h2 class="anchor anchorWithStickyNavbar_PV8p" id="checklists-runbooks-and-notes">Checklists, Runbooks, and notes<a href="https://fcmam5.me/blog/trying-to-become-a-better-developer-by-learning-more-about-aviation#checklists-runbooks-and-notes" class="hash-link" aria-label="Direct link to Checklists, Runbooks, and notes" title="Direct link to Checklists, Runbooks, and notes">​</a></h2>
<p>I learned that pilots have checklists for many scenarios, and they are continually checked and followed even if the pilots are operating the same airplane for long hours and probably flew and landed it hundreds of times, they still follow the same checklists because they don’t want to miss any tiny detail.</p>
<p>These checklists can also cover incidents and what to do when a certain problem occurs, they may cover things that seem obvious to anyone but under stress, tiredness, and confusion they might be missed or done in the wrong way which can be fatal.</p>
<p>In addition to checklists, I learned that pilots communicate and keep a log of their actions, for example when taking off, the pilot will communicate their V1, VR, and V2, then they announce the speed when reaching it during the takeoff.</p>
<p>This is a learning for me as a software engineer, it is good practice to write Runbooks and keep notes whenever possible when designing, developing, and debugging software. This might come in handy to trace back issues or to learn and have the narrative behind decisions that are implemented.</p>
<p>Maintaining troubleshooting guides is crucial to easily and quickly debug and spot common errors that might happen in the past, or that are expected, these guides should be maintained and updated with new learnings and incidents that can be mitigated in the future.</p>
<p>We are humans, we forget a lot and we don’t know how to act well under stress, and also, we can’t always have the same people who debugged a certain problem on-call 24/7, we must learn from them for the best of everyone.</p>
<h2 class="anchor anchorWithStickyNavbar_PV8p" id="its-a-semi-automated-environment">It’s a Semi-automated environment<a href="https://fcmam5.me/blog/trying-to-become-a-better-developer-by-learning-more-about-aviation#its-a-semi-automated-environment" class="hash-link" aria-label="Direct link to It’s a Semi-automated environment" title="Direct link to It’s a Semi-automated environment">​</a></h2>
<p>Autopilots nowadays are smart, they can fly and land an aircraft, and still, we need pilots to handle some situations manually.</p>
<p>When the autopilot is flying the airplane, the pilot would be more in the monitoring mission. Air traffic controllers as well rely on instruments and “intelligent” software, but we still rely on the human factor to take decisions and to watch these instruments because software can be faulty, or it just cannot cover edge cases (like what happened in <a href="https://www.youtube.com/watch?v=nj7nG6gJqsU" target="_blank" rel="noopener noreferrer">06L at Toronto airport</a>).</p>
<p>Same as with software engineering, we have a lot of development, debugging, orchestrating, and monitoring tools that can do a lot for us but we still need to manage and configure them and sometimes just do things by ourselves since we might reach their limitations or we have an edge case that wasn’t covered when they were built.</p>
<h2 class="anchor anchorWithStickyNavbar_PV8p" id="have-a-ubiquitous-language">Have a “Ubiquitous language”<a href="https://fcmam5.me/blog/trying-to-become-a-better-developer-by-learning-more-about-aviation#have-a-ubiquitous-language" class="hash-link" aria-label="Direct link to Have a “Ubiquitous language”" title="Direct link to Have a “Ubiquitous language”">​</a></h2>
<p>Pilots who fly internationally don’t only have to speak English, but they also have to use unambiguous jargon, they even have to spell important words in <a href="https://en.wikipedia.org/wiki/NATO_phonetic_alphabet" target="_blank" rel="noopener noreferrer">NATO Phonetic alphabet</a> (Alpha, Bravo, Charlie…). It is expected from any pilots, ATC operator, and investigator to differentiate between a Mayday and a PAN-PAN, to understand what airborne and “hold short” mean.</p>
<p>Similarly, as software engineers, we do have our vocabulary, our wordings, and expressions but we sometimes tend to misuse some of them, or we don’t pay attention to how words can have a huge impact on some of our decisions.</p>
<p>The term “Ubiquitous language” was used by Eric Evans in his book <a href="https://www.amazon.de/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215" target="_blank" rel="noopener noreferrer">Domain-Driven Design: Tackling Complexity in the Heart of Software</a>, to define and build a common language between developers and different parties working and using the application, this ubiquitous language, when used in conversations between developers, testers, product owners and domain experts, based on a domain model that evolves with the product and with the team’s understanding of the domain.</p>
<p>The common understanding and using the same common language should also affect the “DoD and DoR”, which always cause friction between business, product, development, and Ops teams. When “Ready” and “Done” definitions are not clear, engineers may start working on tickets with undefined or unclear requirements which may lead to either an incomplete or an overengineered solution. And if the definition of “Done” is not clear, product and business teams may lose track of what the development team is working on, or developers may push incomplete features that might not be signed by QA.</p>
<h2 class="anchor anchorWithStickyNavbar_PV8p" id="design-good-enough-monitoring-dashboards">Design good enough monitoring dashboards<a href="https://fcmam5.me/blog/trying-to-become-a-better-developer-by-learning-more-about-aviation#design-good-enough-monitoring-dashboards" class="hash-link" aria-label="Direct link to Design good enough monitoring dashboards" title="Direct link to Design good enough monitoring dashboards">​</a></h2>
<p>Monitoring aircraft, weather radars, and airports is a vital part of aviation. Sensors and computers are getting smarter and more accurate and that only can help pilots be more proactive, they can spot problems in their early stages and solve them seamlessly. But when technology fails to deliver, pilots’ experience and training come to debug and find optimal solutions to overcome issues.</p>
<p>As software engineers we also care about our health checks, our metrics, and alerts, we may even go a little bit crazy and have verbose logs and over-crowded dashboards of metrics we rarely care about. We can have that as a learning and make sure to have habits to check monitoring dashboards regularly.</p>
<p>As developers, we love tools, we love dashboards, and we all love seeing our health checks green with no crazy spikes when we leave for our weekends. But experience and horror stories showed us that sometimes these monitoring dashboards might not be reliable and most of the time it’s because of the way we set them up, and a few times they’re buggy or affected by infrastructure outages, for example, this:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/mrp1F2rezdw?si=WmeRbiD8aiUS9Ufr&amp;start=2278" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe>
<p>This and other lessons taught us that we should invest in having a set of health checks and monitoring dashboards, and all of them need to be carefully set up.</p>
<p>One other thing to consider is that we need to avoid noise when it comes to dashboards, we should have a smart optimal set of metrics and views to monitor or it will be overwhelming to process what’s going wrong by looking at the screen regularly.</p>
<h2 class="anchor anchorWithStickyNavbar_PV8p" id="treat-warnings-and-alerts-as-warnings-and-alerts">Treat warnings and alerts as WARNINGS and ALERTS!<a href="https://fcmam5.me/blog/trying-to-become-a-better-developer-by-learning-more-about-aviation#treat-warnings-and-alerts-as-warnings-and-alerts" class="hash-link" aria-label="Direct link to Treat warnings and alerts as WARNINGS and ALERTS!" title="Direct link to Treat warnings and alerts as WARNINGS and ALERTS!">​</a></h2>
<p>We are all guilty of ignoring warnings in our applications and different monitoring and scanning consoles. We think that we know that some of them are false positives, irrelevant, not urgent, or just another “not my problem” labeled thing.</p>
<p>After a while we get immune, we stop caring and noticing “real warnings” when they happen so we don’t act on them on time.</p>
<p>Alerts are even more critical, and similarly to aviation fields, if they happen we should <strong>really</strong> react to that, if we ever think that alert is a false positive one, we should try to tag it so we can improve our alerting and monitoring systems. We don’t want to become numb to these alerts so we just ignore them or treat them seriously and react to them in time.</p>
<h2 class="anchor anchorWithStickyNavbar_PV8p" id="simulators">Simulators<a href="https://fcmam5.me/blog/trying-to-become-a-better-developer-by-learning-more-about-aviation#simulators" class="hash-link" aria-label="Direct link to Simulators" title="Direct link to Simulators">​</a></h2>
<p>Pilots spend hours training on simulators that are as realistic as it gets before they actually start flying real planes.</p>
<p>And that’s a lesson for us, as expensive as it is to have staging and/or pre-prod environments that are protected and close to production they might be cheaper than dealing with problems in production. These environments must be kept clean and protected as we would treat production to see how our applications can be deployed and run without any hacks or manual interventions from us, while we may lose restrictions on DEV environments and give developers more freedom to experiment and safely break things.</p>
<p>One other lesson we learn from simulators is again: Everyone needs training. We don’t want improvisations and risky fixes on production.</p>
<p>As referred to in the talk I shared from AWS team, they make sure to train their engineers to handle outages so that when that happens they know what to do without panicking (hopefully).</p>
<h2 class="anchor anchorWithStickyNavbar_PV8p" id="no-matter-how-experienced-you-are-take-your-time-learning-new-tools">No matter how experienced you are, take your time learning new tools<a href="https://fcmam5.me/blog/trying-to-become-a-better-developer-by-learning-more-about-aviation#no-matter-how-experienced-you-are-take-your-time-learning-new-tools" class="hash-link" aria-label="Direct link to No matter how experienced you are, take your time learning new tools" title="Direct link to No matter how experienced you are, take your time learning new tools">​</a></h2>
<p>A pilot’s experience is evaluated by their flying hours, and when a certain pilot is flying commercially they’re evaluated by their total flying hours and the number of hours they flew on that type (particular airplane model).</p>
<p>As software engineers, we have a big ego, we think we are smart and we know that after years of experience, we can absorb anything new in our ecosystem easily.</p>
<p>As a JavaScript developer, I’m confident that I can switch to any framework and library just by spending a few hours looking into the documentation or by reading other people’s code examples, after all, it’s just JavaScript. However, with that mentality and with some over-confidence I may overlook certain caveats, or certain “good practices” if I don’t pay enough attention to the documentation and give new tools, concepts, and technologies their fair amount of time and focus.</p>
<h2 class="anchor anchorWithStickyNavbar_PV8p" id="take-rest-respect-your-time-off-if-you-care-about-your-job">Take rest, respect your time off if you care about your job<a href="https://fcmam5.me/blog/trying-to-become-a-better-developer-by-learning-more-about-aviation#take-rest-respect-your-time-off-if-you-care-about-your-job" class="hash-link" aria-label="Direct link to Take rest, respect your time off if you care about your job" title="Direct link to Take rest, respect your time off if you care about your job">​</a></h2>
<p>Fatigue is a major factor in many accidents. That made regulators and companies ensure, and enforce having a good amount of rest for pilots.</p>
<p>If pilots operate for long hours or they did not have quality rest they will have poor judgment, decision-making, and flying abilities. This may cause a failure in assessing different flying scenarios and challenges.</p>
<p>While writing this article, one of my favorite aviation channels published this video about my country’s aviation company. It fits perfectly with, this section’s point so I thought I would speak about it here:</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/o57gCc-_oPY?si=be5JuUCAxeI72K6x" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe>
<p>As software engineers, we do relate to situations where tiredness can cause a fatal accident. How many times have we thought we’d push ourselves and work for extra minutes and ended up creating bugs and incidents that took us hours to fix?</p>
<p><img decoding="async" loading="lazy" alt="Monkeyuser: Quick fix" src="https://fcmam5.me/assets/images/monkeyuser-quickfix-6a4206182afedc7fad3df75290857252.png" width="1400" height="1523" class="img_H9vG"></p>
<p>The moral of this was synthesized in Uncle Bob’s Clean Coder book:</p>
<blockquote>
<p>“Don’t write code when you are tired. Dedication and professionalism are more about discipline than hours. Make sure that your sleep, health, and lifestyle are tuned so that you can put in eight good hours per day.” — Robert C. Martin (Uncle Bob), The clean coder</p>
</blockquote>
<p>And:</p>
<blockquote>
<p>“If you are tired or distracted, do not code. You’ll only wind up redoing what you did. Instead, find a way to eliminate the distractions and settle your mind.” — Robert C. Martin (Uncle Bob), The clean coder</p>
</blockquote>
<p>One other trap we may fall into is that “if I ever stop here I would forget where I stopped” or something like “I’m sick of this and I want to start my next day by working on something other than this” And we end up rushing, designing and writing things we forget due to fatigue later and might also clumsy and be of low quality.</p>
<blockquote>
<p>“Can’t go home till you solve this problem? Oh yes you can, and you probably should! Creativity and intelligence are fleeting states of mind. When you are tired, they go away. If you then pound your nonfunctioning brain for hour after late-night hour trying to solve a problem, you’ll simply make yourself more tired and reduce the chance that the shower, or the car, will help you solve the problem.
When you are stuck, when you are tired, disengage for awhile. Give your creative subconscious a crack at the problem. You will get more done in less time and with less effort if you are careful to husband your resources.” — Robert C. Martin (Uncle Bob), The clean coder</p>
</blockquote>
<p>I learned that taking time off and having real weekends and vacations is an investment in your professional life. In your time off, you don’t work, don’t think about work, and only care about your health, family, and enjoying your time. Once you are back, you will find yourself more motivated, more focused and, your passion or your interest refreshed.</p>]]></content>
        <author>
            <name>Abdeldjalil Fortas</name>
            <uri>https://github.com/fcmam5</uri>
        </author>
        <category label="general" term="general"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[I’m learning front-end development, again — Part 1 (Browser rendering optimization)]]></title>
        <id>https://fcmam5.me/blog/learning-front-end-development-again-part-1-browser-rendering-optimization</id>
        <link href="https://fcmam5.me/blog/learning-front-end-development-again-part-1-browser-rendering-optimization"/>
        <updated>2018-05-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[TLDR; I disregarded front-end development until I started reading about some of its advanced concepts and challenges, I learned more about browser rendering optimization, website performances, and web accessibility. In this article, I’m going to share some notes I took when learning browser rendering optimization.]]></summary>
        <content type="html"><![CDATA[<p><em>TLDR; I disregarded front-end development until I started reading about some of its advanced concepts and challenges, I learned more about browser rendering optimization, website performances, and web accessibility. In this article, I’m going to share some notes I took when learning browser rendering optimization.</em></p>
<div class="theme-admonition theme-admonition-note admonition_qa_F alert alert--secondary"><div class="admonitionHeading_nrGX"><span class="admonitionIcon_Rwg1"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_AI9x"><p>This blog was originally published on Medium: <a href="https://medium.com/@Fcmam5/im-learning-front-end-development-again-part-1-browser-rendering-optimization-c8359ee90c40" target="_blank" rel="noopener noreferrer">I’m learning front-end development, again — Part 1 (Browser rendering optimization)</a></p></div></div>
<p>I thought that front-end development was only about making beautiful user interfaces, responsive and mobile-friendly websites that load fast. I imagined that a Front-end Developer was someone who knows more HTML tags, CSS properties and knows how to manipulate DOM with and/or without jQuery, and who knows how things should look and feels when using his applications, and that a front-end developer is only a creative person who knows how to convert mockups to HTML and CSS, who works with React, Angular and Vue.js. And that the backend developer is the smart developer who does the big things in any web application, this one -for me- who’s responsible for the hard part by dealing with a database, Files I/O, authentication, security, and performance...</p>
<p>Apparently, working with HTML, CSS, and JavaScript and designing user interfaces is not that interesting like building backends and dealing with “real challenges”, so why do companies invest in recruiting front-end developers for “Just designing interfaces”? Why front-end development is a separate and well-paid specialty? Looking for an answer, I started a journey of reading and learning “Advanced front-end development” articles and lessons to know how it feels to be a front-end developer, what are their/our challenges, and why there are people specialized in that.</p>
<p>This week, I will be reading and taking notes for what I learned, if it seems complicated, boring or confusing to you, that will be the answer to my questions, it will explain why there are front-end developers, the persons who care about all of that and maybe more!</p>
<p>The journey will be guided by <a href="https://frontendmasters.com/books/front-end-handbook/2018/" target="_blank" rel="noopener noreferrer">FrontEnd developer handbook 2018</a>. So let’s get started in learning front-end development.</p>
<p>First, as front-end developers, we shouldn’t only design beautiful websites. We must take care of things beyond the good-looking design, as specialists and developers, building usable, accessible, and performant web pages is our challenge.</p>
<p>It seems challenging, Nice!<br>
Let’s get it started.</p>
<h2 class="anchor anchorWithStickyNavbar_PV8p" id="website-performances">Website performances<a href="https://fcmam5.me/blog/learning-front-end-development-again-part-1-browser-rendering-optimization#website-performances" class="hash-link" aria-label="Direct link to Website performances" title="Direct link to Website performances">​</a></h2>
<blockquote>
<p>Bad performance kills good sites — <a href="https://twitter.com/aerotwist" target="_blank" rel="noopener noreferrer">Paul Lewis</a> at <a href="https://classroom.udacity.com/courses/ud860/lessons/4138328558/" target="_blank" rel="noopener noreferrer">ud860</a></p>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_PV8p" id="how-browsers-works">How browsers works<a href="https://fcmam5.me/blog/learning-front-end-development-again-part-1-browser-rendering-optimization#how-browsers-works" class="hash-link" aria-label="Direct link to How browsers works" title="Direct link to How browsers works">​</a></h3>
<p>We can’t optimize or work on websites performances without knowing how the browsers that display their UIs work.</p>
<p><img decoding="async" loading="lazy" alt="Quantum Up close: What is a browser engine" src="https://fcmam5.me/assets/images/browser-engine-df0d40552f1d8858e1a40d758262b1c1.png" width="1200" height="320" class="img_H9vG"></p>
<p>So let’s look under the hood.</p>
<p><img decoding="async" loading="lazy" alt="Browser components — HTML5 Rocks" src="https://fcmam5.me/assets/images/browser-components-da090380db95b6066291083f7e3e33ba.png" width="500" height="339" class="img_H9vG"></p>
<p>Web browsers are composed of a UI, a browser engine that transfers the actions between the UI and the rendering engine, the rendering engine displays the HTML and CSS after parsing it. Browsers also have a data storage layer where data are stored locally as cookies, localStorage, and also IndexedDB, WebsSQL, and FileSystem. There’s also networking (Where HTTP, DNS… are handled), JS interpreter, and UI backend.</p>
<p><img decoding="async" loading="lazy" alt="Quantum Up close: What is a browser engine" src="https://fcmam5.me/assets/images/what-is-browser-engine-e969186a1e23f5e9dff4996f8213cc3f.png" width="1650" height="1490" class="img_H9vG"></p>
<h3 class="anchor anchorWithStickyNavbar_PV8p" id="render-tree">Render Tree<a href="https://fcmam5.me/blog/learning-front-end-development-again-part-1-browser-rendering-optimization#render-tree" class="hash-link" aria-label="Direct link to Render Tree" title="Direct link to Render Tree">​</a></h3>
<p>Browser engines parse the HTML and CSS, construct the DOM, calculate the styles and display the web page after composing multiple layers.</p>
<p>After parsing HTML, the browser start constructing the render tree, it’s like the DOM tree with no <code>&lt;head&gt;</code> element, no hidden elements by <code>display:none</code> and with CSS pseudo-elements added to the tree-like</p>
<div class="language-css codeBlockContainer_KNDO theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_Gjbw"><pre tabindex="0" class="prism-code language-css codeBlock_CjlJ thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_D9LQ"><span class="token-line" style="color:#393A34"><span class="token selector" style="color:#00009f">h1</span><span class="token selector pseudo-element" style="color:#00009f">::before</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token property" style="color:#36acaa">content</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Hello Africa"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_e9bE"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_JVcx" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_ojVv"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_Xe0s"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Will construct a node like the DOM’s nodes. After this step, CSS will be added alongside media, the web page will be composited by multiple layers.</p>
<p>Read more at:</p>
<ul>
<li><a href="https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/" target="_blank" rel="noopener noreferrer">HTML5Rocks : How browsers work</a></li>
<li><a href="https://hacks.mozilla.org/2017/05/quantum-up-close-what-is-a-browser-engine/" target="_blank" rel="noopener noreferrer">Quantum Up close: What is a browser engine</a></li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_PV8p" id="optimize-the-browser-rendering">Optimize the browser rendering<a href="https://fcmam5.me/blog/learning-front-end-development-again-part-1-browser-rendering-optimization#optimize-the-browser-rendering" class="hash-link" aria-label="Direct link to Optimize the browser rendering" title="Direct link to Optimize the browser rendering">​</a></h3>
<p>Understanding how “Browsers work” was to learn “How to optimize the rendering process” and to make websites that load and work smoothly. In order to deepen my knowledge and to jump to a practical course, I started <a href="https://classroom.udacity.com/courses/ud860/" target="_blank" rel="noopener noreferrer">Udacity’s Browser optimization</a> course, where I understood more core concepts of browser rendering. Now, let’s dive into the rendering process.</p>
<h3 class="anchor anchorWithStickyNavbar_PV8p" id="60fps-and-device-refresh-rates">60fps and Device Refresh Rates<a href="https://fcmam5.me/blog/learning-front-end-development-again-part-1-browser-rendering-optimization#60fps-and-device-refresh-rates" class="hash-link" aria-label="Direct link to 60fps and Device Refresh Rates" title="Direct link to 60fps and Device Refresh Rates">​</a></h3>
<p>Users expect the web page that they are visiting to be interactive and smooth, working on web performance doesn't mean we only need to make pages load fast, but we need to make sure that they are running, scrolling fast, animations should be smooth.</p>
<p>HTML, CSS, and JavaScript are handled by browsers, most devices running these browsers refresh their screens 60 times a second (it means that we have 60FPS or one Frame per 16.6666ms). All our animations should be under a score of 10ms (source: <a href="https://developers.google.com/web/fundamentals/performance/rendering/" target="_blank" rel="noopener noreferrer">Google Developers: Rendering performance</a>).</p>
<p>In order to achieve that, we must know more about the Pixel pipeline.</p>
<p><img decoding="async" loading="lazy" alt="The pixel pipeline, source: Google Developers: Rendering performance" src="https://fcmam5.me/assets/images/rendering-cycle-d08eb77e5aa1a1c5d8aff0b00a2ba7bb.png" width="1093" height="167" class="img_H9vG"></p>
<ul>
<li><strong>JavaScript</strong> most of the time, JS is used to make visual changes to our web pages, by adding DOM elements to our pages, changing styles…</li>
<li><strong>Style calculations</strong> are the process of calculating what CSS rules to apply on which element based on matching selectors.</li>
<li><strong>Layout</strong> is the process of calculating spaces, widths of the <code>&lt;body&gt;</code> element, and its children's widths.</li>
<li><strong>Paint</strong> is the process of filling in pixels by drawing out texts, colors, images, shadows, and every visual part of each element, drawing is done onto multiple layers.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="Firefox’s 3D view — Firefox Developers tools" src="https://fcmam5.me/assets/images/ffx-3d-view-7aadaa7ebfa440569b9c86e61ed98d8e.png" width="973" height="602" class="img_H9vG"></p>
<ul>
<li><strong>Compositing</strong> is the process of calculating and drawing each element’s order so that the page renders correctly.</li>
</ul>
<p>We won’t always solicit every part of the pipeline on every frame, the fewer properties are changed the fewer calculations we do.</p>
<p>This part taught me that some tasks are more expensive than others, some CSS properties like changing a certain element’s position may cause Style calculations, Layout calculations, Paint and composite processes and that’s expensive. While changing the <code>cursor</code> property won’t affect the layout or painting, it will be carried out by the compositor thread with the help of the GPU.</p>
<p><img decoding="async" loading="lazy" alt="Cursor CSS property on CSS Triggers" src="https://fcmam5.me/assets/images/cursor-css-c13fec412c67e9299bda694b76b83629.png" width="922" height="380" class="img_H9vG"></p>
<blockquote>
<p>Performance is the art of avoiding work, and making any work you do as efficient as possible. — <a href="https://developers.google.com/web/fundamentals/performance/rendering/" target="_blank" rel="noopener noreferrer">Google Developers: Rendering performance</a>.</p>
</blockquote>
<p>I learned all these valuable information from:</p>
<ul>
<li><a href="https://classroom.udacity.com/courses/ud860/lessons/4138328558/concepts/41373290750923" target="_blank" rel="noopener noreferrer">Browser rendering and optimization: Layout and paint</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/rendering/" target="_blank" rel="noopener noreferrer">Google Developers: Rendering performance</a></li>
<li><a href="https://csstriggers.com/" target="_blank" rel="noopener noreferrer">CSS Triggers</a></li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_PV8p" id="rail-response-animate-idle-load">RAIL (Response, Animate, Idle, Load)<a href="https://fcmam5.me/blog/learning-front-end-development-again-part-1-browser-rendering-optimization#rail-response-animate-idle-load" class="hash-link" aria-label="Direct link to RAIL (Response, Animate, Idle, Load)" title="Direct link to RAIL (Response, Animate, Idle, Load)">​</a></h3>
<p>RAIL is a performance model, RAIL’s goals and guidelines help us to ensure a good UX.</p>
<p><img decoding="async" loading="lazy" alt="The 4 parts of the RAILS performance model" src="https://fcmam5.me/assets/images/rails-998a4303426e1743dd643e47c217e01d.png" width="1390" height="504" class="img_H9vG"></p>
<p>In Udacity course, the teachers suggested these metrics.</p>
<p><img decoding="async" loading="lazy" alt="Udacity’s Browser rendering optimization course: RAIL Response" src="https://fcmam5.me/assets/images/rails-udacity-039ca25838ca51c42415582725c9e5e4.png" width="946" height="533" class="img_H9vG"></p>
<p>Users dislike when animations aren’t smooth, with 60 frames rendered every second, animations should be at 16ms per frame. When it comes to response, users want to feel that the results are immediate, any delay between action and reaction is non-accepted.</p>
<p>It is true that mobile users, especially those who are using slow 3G connections, it is a realistic goal to load pages in 5000ms, but they accept to wait for sites to respond to their inputs, not for sites to load. So it is important to load as little data as possible so the user starts using the page while loading the complete extra loadings.</p>
<p>We can also load complex animations upfront (see more about <a href="https://youtu.be/H3z97NcAbCI" target="_blank" rel="noopener noreferrer"><strong>F</strong>irst <strong>L</strong>ast <strong>I</strong>nvert <strong>P</strong>lay</a>).</p>
<p>At the end of this point, I would like to share with you these useful links by <a href="https://developers.google.com/web/fundamentals/performance/rail#tools" target="_blank" rel="noopener noreferrer">Google Developers: RAIL Tools</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_PV8p" id="javascript-understand-how-it-works-on-the-browser-then-optimize">JavaScript: Understand how it works on the browser then optimize!<a href="https://fcmam5.me/blog/learning-front-end-development-again-part-1-browser-rendering-optimization#javascript-understand-how-it-works-on-the-browser-then-optimize" class="hash-link" aria-label="Direct link to JavaScript: Understand how it works on the browser then optimize!" title="Direct link to JavaScript: Understand how it works on the browser then optimize!">​</a></h3>
<p>JavaScript engines in web browsers interpret the JavaScript utilizing JIT compilers to transform the JS code to byte-code.</p>
<p>Each JavaScript engine implements a version of ECMAScript, a JavaScript dialect and that’s why we have <a href="https://kangax.github.io/compat-table/es6/" target="_blank" rel="noopener noreferrer">different browser support for ES6, ES7 …</a></p>
<blockquote>
<p>The goal of a JavaScript engine’s code parsing and execution process is to generate the most optimized code in the shortest possible time. — Jen Looper, <a href="https://developer.telerik.com/featured/a-guide-to-javascript-engines-for-idiots/" target="_blank" rel="noopener noreferrer">A Guide to JavaScript Engines for Idiots</a></p>
</blockquote>
<p>JavaScript code, could not be optimized by hacking the “micro-optimizations” of the JIT compilers.</p>
<p>So, in order to optimize JavaScript, there are many things we should ensure, one of them is to run JavaScript as earlier as possible at the begging of each frame (that’s why we discussed the pixel pipeline and RAIL).</p>
<p>Modern browsers provide a <code>requestAnimationFrame</code> function that schedules JavaScript to run as earlier as possible at the begging of the frame.</p>
<p><img decoding="async" loading="lazy" alt="Using requestAnimationFrame (example from Udacity’s course)" src="https://fcmam5.me/assets/images/requestAnimationFrame-002854498ca63825f3d36b87f3f3f93b.png" width="631" height="294" class="img_H9vG"></p>
<p>Also, when it comes to “JavaScript optimization”, Web workers will be our friends, they allow us to run JavaScript on a totally different thread, they can perform I/O without interfering with the main browser thread, Web Workers can communicate with the main JavaScript code (that created it) by messages. Read more at <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="noopener noreferrer">Web Worker Documentation on MDN</a>.</p>
<p>For example, we gonna pass a string to a worker in workerFile.js the worker will return the message to the main script.</p>
<p>Main script:</p>
<div class="language-javascript codeBlockContainer_KNDO theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_Gjbw"><pre tabindex="0" class="prism-code language-javascript codeBlock_CjlJ thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_D9LQ"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> worker </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Worker</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'workerFile.js'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">worker</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">addEventListener</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'message'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'Worker said: '</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">worker</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">postMessage</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'Hello World'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// Send data to our worker.</span><br></span></code></pre><div class="buttonGroup_e9bE"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_JVcx" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_ojVv"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_Xe0s"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And workerFile.js (the worker):</p>
<div class="language-javascript codeBlockContainer_KNDO theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_Gjbw"><pre tabindex="0" class="prism-code language-javascript codeBlock_CjlJ thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_D9LQ"><span class="token-line" style="color:#393A34"><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">addEventListener</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'message'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">postMessage</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">toUpperCase</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup_e9bE"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_JVcx" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_ojVv"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_Xe0s"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The example is from <a href="https://www.html5rocks.com/en/tutorials/workers/basics/" target="_blank" rel="noopener noreferrer">HTML5Rocks: The basics of Web workers</a>.</p>
<p>When talking about <strong>memory management in JavaScript</strong>, we can only rely on JavaScript’s <strong>garbage collector</strong>, JavaScript doesn't have memory or pointers management functions such as <code>malloc()</code> and <code>free()</code>, so in this case <strong>Variables Scopes</strong>, and <strong>functions calls</strong>. For example:</p>
<p>When declaring a local variable inside a function, the allocated space for this variable will be freed after using it.</p>
<div class="language-javascript codeBlockContainer_KNDO theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_Gjbw"><pre tabindex="0" class="prism-code language-javascript codeBlock_CjlJ thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_D9LQ"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">foo</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">arg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> bar </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"this is a local variable"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_e9bE"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_JVcx" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_ojVv"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_Xe0s"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>But, when using global variables accidentally, we will be using a memory space all the time.</p>
<div class="language-javascript codeBlockContainer_KNDO theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_Gjbw"><pre tabindex="0" class="prism-code language-javascript codeBlock_CjlJ thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_D9LQ"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">foo</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">arg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    bar </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"this is a hidden global variable"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_e9bE"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_JVcx" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_ojVv"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_Xe0s"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Another way where global variables could be created accidentally through this when the function is called on the global scope, for example:</p>
<div class="language-javascript codeBlockContainer_KNDO theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_Gjbw"><pre tabindex="0" class="prism-code language-javascript codeBlock_CjlJ thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_D9LQ"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">foo</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">variable</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"potential accidental global"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Foo called on its own, this points to the global object (window)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// rather than being undefined.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">foo</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">variable</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// will return "potential accidental global" and not undefined</span><br></span></code></pre><div class="buttonGroup_e9bE"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_JVcx" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_ojVv"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_Xe0s"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><em>This example is taken from an <a href="https://auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/" target="_blank" rel="noopener noreferrer">auth0 forum article</a>.</em></p>
<p>Also, sometimes when performing an animation and when working with timers and callbacks, for example <code>setInterval</code> is used to perform a certain temporary animation, then it won’t be necessary, let’s check <a href="https://jsfiddle.net/Fcmam5/zswbd3eL/" target="_blank" rel="noopener noreferrer">this example</a>:</p>
<div class="language-javascript codeBlockContainer_KNDO theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_Gjbw"><pre tabindex="0" class="prism-code language-javascript codeBlock_CjlJ thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_D9LQ"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> clientCountElement </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token dom variable" style="color:#36acaa">document</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getElementById</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'visitors'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> ourClients </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getData</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// returns 100 for example</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> clientCounter </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">setInterval</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ourClients </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> clientCounter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    clientCounter</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    clientCountElement</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">innerHTML</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token known-class-name class-name">String</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">clientCounter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup_e9bE"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_JVcx" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_ojVv"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_Xe0s"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>When <code>clientCounter</code> reaches the <code>ourClients</code> the animation will stop, the visitor number won’t be incremented but the callback will continue the execution. So, the timers like <code>setTimeout</code> and <code>setInterval</code> must be cleared after finishing the desired action. For my example I tried this:</p>
<div class="language-javascript codeBlockContainer_KNDO theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_Gjbw"><pre tabindex="0" class="prism-code language-javascript codeBlock_CjlJ thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_D9LQ"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> clientCountElement </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token dom variable" style="color:#36acaa">document</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">getElementById</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'visitors'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> ourClients </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getData</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// returned 100</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> clientCounter </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> animation </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">setInterval</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">function</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ourClients </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> clientCounter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        clientCounter</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        clientCountElement</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">innerHTML</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token known-class-name class-name">String</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">clientCounter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Here we cleanup after finishing our animation</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">clearInterval</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">animation</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">delete</span><span class="token plain"> animation</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup_e9bE"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_JVcx" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_ojVv"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_Xe0s"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>And that created a difference, as in this live preview using <a href="https://developers.google.com/web/tools/chrome-devtools/memory-problems/" target="_blank" rel="noopener noreferrer">Google Chrome’s Task Manager</a>.</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/epkuTNmH7wc?si=gRuTfCjQSAZdvYar" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe>
<p>Timers also may cause another problem, they may run at the end of the frame so it may cause us a missing frame.</p>
<p><img decoding="async" loading="lazy" alt="Google developers: Optimize JavaScript execution" src="https://fcmam5.me/assets/images/timers-exec-9ebd7c47275bc6f57902f07430d05011.png" width="1024" height="768" class="img_H9vG"></p>
<p>So, the solution for that is “Using <code>requestAnimationFrame</code>”. As in this example from <a href="https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution" target="_blank" rel="noopener noreferrer">Google developers</a>:</p>
<div class="language-javascript codeBlockContainer_KNDO theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_Gjbw"><pre tabindex="0" class="prism-code language-javascript codeBlock_CjlJ thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_D9LQ"><span class="token-line" style="color:#393A34"><span class="token doc-comment comment" style="color:#999988;font-style:italic">/**</span><br></span><span class="token-line" style="color:#393A34"><span class="token doc-comment comment" style="color:#999988;font-style:italic"> * If run as a requestAnimationFrame callback, this</span><br></span><span class="token-line" style="color:#393A34"><span class="token doc-comment comment" style="color:#999988;font-style:italic"> * will be run at the start of the frame.</span><br></span><span class="token-line" style="color:#393A34"><span class="token doc-comment comment" style="color:#999988;font-style:italic"> */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">updateScreen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">time</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Make visual updates here.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">requestAnimationFrame</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">updateScreen</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup_e9bE"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_JVcx" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_ojVv"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_Xe0s"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Another memory leak is <strong>Out of DOM references</strong>, for example when storing a table cell node (<code>&lt;td&gt;</code>), then deleting the table node from the DOM for some reason. The table will be removed from the DOM, but it will stay in memory, the table cell is a child node of <code>&lt;table&gt;</code> and children keep references to their parents, so the reference to the table cell causes the whole table to stay in memory.</p>
<ul>
<li>
<p><a href="https://kangax.github.io/compat-table/" target="_blank" rel="noopener noreferrer">ECMAScript Compatibility table</a></p>
</li>
<li>
<p><a href="https://developer.telerik.com/featured/a-guide-to-javascript-engines-for-idiots/" target="_blank" rel="noopener noreferrer">A Guide to JavaScript Engines for Idiots</a></p>
</li>
<li>
<p><a href="https://www.youtube.com/watch?v=pmtwUOHLgq4" target="_blank" rel="noopener noreferrer">Why Is JavaScript So Fast? (aka JavaScript Engines — How Do They Even?)</a></p>
</li>
<li>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="noopener noreferrer">Web Worker Documentation on MDN</a></p>
</li>
<li>
<p><a href="https://www.html5rocks.com/en/tutorials/workers/basics/" target="_blank" rel="noopener noreferrer">HTML5 Rocks: The basics of web workers</a></p>
</li>
<li>
<p><a href="https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution" target="_blank" rel="noopener noreferrer">Google developers: Optimize JavaScript execution</a></p>
</li>
<li>
<p><a href="https://auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/" target="_blank" rel="noopener noreferrer">Auth0: 4 Types of Memory Leaks in JavaScript and How to Get Rid Of Them</a></p>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_PV8p" id="css-optimizations-matter-too">CSS optimizations matter too!<a href="https://fcmam5.me/blog/learning-front-end-development-again-part-1-browser-rendering-optimization#css-optimizations-matter-too" class="hash-link" aria-label="Direct link to CSS optimizations matter too!" title="Direct link to CSS optimizations matter too!">​</a></h3>
<p>When optimizing our web pages, we must take care of CSS too. Using <a href="https://en.bem.info/methodology/key-concepts/#bem-entity" target="_blank" rel="noopener noreferrer">BEM (Block Element Modifier) methodology</a> is recommended, it’s simpler, reusable, and more optimal. It’s easier for browsers to math CSS classes than to calculate <code>nth-child(n)</code>, it seems logical: Matching an element is faster than calculating “Which element it is?” than matching that calculated result.</p>
<p><img decoding="async" loading="lazy" alt="Udacity: Browser rendering (Selector matching)" src="https://fcmam5.me/assets/images/udacity-selector-matching-75897fe4e236f967a7c95133671ef2d2.png" width="1020" height="479" class="img_H9vG"></p>
<p>Also, we must <a href="https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing#avoid_forced_synchronous_layouts" target="_blank" rel="noopener noreferrer">avoid Forced Synchronous Layout</a>. It’s happened when we force the browser to perform layout earlier with JavaScript, normally the Layout should be changed after style calculations that came after running JavaScript.</p>
<p><img decoding="async" loading="lazy" alt="Udacity: Browser rendering (FSL)" src="https://fcmam5.me/assets/images/fsl-9b2cd401048aa3cc2d55d432ba696c56.png" width="949" height="306" class="img_H9vG"></p>
<p>FSL (Forced Synchronous Layout) could be even worse, when not avoiding <a href="https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing#avoid_layout_thrashing" target="_blank" rel="noopener noreferrer">Layout trashing</a>, like we don’t care if we calculate widths, heights, margins and offset each time by calling functions like <code>.offsetHeight</code> inside a loop.</p>
<p>For example, this:</p>
<div class="language-javascript codeBlockContainer_KNDO theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_Gjbw"><pre tabindex="0" class="prism-code language-javascript codeBlock_CjlJ thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_D9LQ"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Read.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> width </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> box</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">offsetWidth</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">resizeAllParagraphsToMatchBlockWidth</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> paragraphs</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Now write.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    paragraphs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">style</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">width</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> width </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'px'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_e9bE"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_JVcx" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_ojVv"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_Xe0s"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Is more optimal than</p>
<div class="language-javascript codeBlockContainer_KNDO theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_Gjbw"><pre tabindex="0" class="prism-code language-javascript codeBlock_CjlJ thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_D9LQ"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">resizeAllParagraphsToMatchBlockWidth</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Puts the browser into a read-write-read-write cycle.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> paragraphs</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    paragraphs</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">style</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">width</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> box</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">offsetWidth</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'px'</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_e9bE"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_JVcx" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_ojVv"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_Xe0s"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Sources:</p>
<ul>
<li>
<p><a href="https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing" target="_blank" rel="noopener noreferrer">Google Developers: Avoid Large, Complex Layouts and Layout Thrashing</a></p>
</li>
<li>
<p><a href="https://classroom.udacity.com/courses/ud860" target="_blank" rel="noopener noreferrer">Udacity: Browser rendering optimization</a></p>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_PV8p" id="measure-first-then-optimize">Measure first, then optimize<a href="https://fcmam5.me/blog/learning-front-end-development-again-part-1-browser-rendering-optimization#measure-first-then-optimize" class="hash-link" aria-label="Direct link to Measure first, then optimize" title="Direct link to Measure first, then optimize">​</a></h3>
<p><img decoding="async" loading="lazy" alt="Udaciry’s Browser rendering optimization DevTools Timeline Practice: Measure first" src="https://fcmam5.me/assets/images/focus-on-the-cause-measure-5e1fdbb43e64a617897a95e48a19e3d5.png" width="495" height="238" class="img_H9vG"></p>
<p>Google Chrome and Firefox provide powerful testing, debugging, and measurement tools. In <a href="https://classroom.udacity.com/courses/ud860" target="_blank" rel="noopener noreferrer">Udacity’s course(Under a title of “Weapons of junk destruction”)</a> I learned a little to how to measure the performance. Firefox also provides a powerful <a href="https://developer.mozilla.org/son/docs/Tools/Performance" target="_blank" rel="noopener noreferrer">Performance measurement tool in his DevTools</a>.</p>
<p>When working on website performance, we must always measure, at the begging and after performing any modifications, we must not “<strong>Try to solve problems that we don’t have</strong>”.</p>
<p>Somehow, when taking a rest from writing, I visited Facebook where I found that freeCodeCamp posted this great talk!</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/v5r_n6Tq0uk?si=V3IxwaZYrGZTww35" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe>
<br>
<p>My first week ends here, and that was what I learned. I really don’t know “How it feels to be a front-end developer”, how do the professional front-end developers work, and do they really care about this? I really want to hear anything from you, the front-end developers especially!</p>
<p>I enjoyed studying this week, I understood the rendering process, and that everything matters. Some of the concepts seemed harder to understand so I looked up to them, I needed more resources to understand them. Trying to take notes about what I’m learning on this article obliged me to do more efforts to understand all that I need to write, and I needed to write all the interesting things I read, so writing was a motivation for me!</p>]]></content>
        <author>
            <name>Abdeldjalil Fortas</name>
            <uri>https://github.com/fcmam5</uri>
        </author>
        <category label="frontend" term="frontend"/>
    </entry>
</feed>